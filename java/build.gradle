plugins {
    id 'java-library'
    id 'maven-publish'
    id 'com.google.protobuf' version '0.+'
    id 'signing'
    id 'com.github.johnrengelman.shadow' version '7.+'
}

def gitVersion = { ->
    def stdout = new ByteArrayOutputStream()
    def execResult = exec {
        commandLine 'git', 'describe', '--tags', '--dirty'
        standardOutput = stdout
        ignoreExitValue = true
    }
    if (execResult.exitValue != 0) {
        return '0.0.0+development-SNAPSHOT'
    }

    def pattern = ~/v([0-9]+)(?:.([0-9]+))?(?:.([0-9]+))?(?:-(alpha|beta|pre|rc).([0-9]+))?(?:-([0-9]+)-([a-g0-9]+))?(-dirty)?/
    def newVersion = stdout.toString().trim().replaceFirst(pattern) { _,major,minor,patch,pre,preVersion,com,hash,dirty ->
        def incremented = false
        def result = ''
        if (com != null || hash != null || dirty != null) {
            result = '-SNAPSHOT'
        } else {
            incremented = true
        }
        if (pre != null && preVersion != null) {
            if (!incremented) {
                preVersion = (preVersion as int) + 1
                incremented = true
            }
            def s = "-${pre}${preVersion}"
            result = s + result
        }
        if (patch != null) {
            if (!incremented) {
                patch = (patch as int) + 1
                incremented = true
            }
            result = ".${patch}${result}"
        }
        if (minor != null) {
            if (!incremented) {
                minor = (minor as int) + 1
                incremented = true
            }
            result = ".${minor}${result}"
        }
        if (!incremented) {
            major = (major as int) + 1
        }
        result = "${major}${result}"
        return result
    }
    return newVersion
}

group = 'edu.umn.nlpie'
version = gitVersion()
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
    maven { // The google mirror is less flaky than mavenCentral()
        url "https://maven-central.storage-download.googleapis.com/repos/central/data/" }
    mavenCentral()
    mavenLocal()
}

java {
    withJavadocJar()
    withSourcesJar()
}

sourceSets {
    main {
        proto {
            srcDir '../proto'
        }
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
    withLogBinding {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
        resources {
            srcDirs 'log_resources'
        }
    }
}

def grpcVersion = '1.+'
def protobufVersion = '3.+'
def junitVersion = '5.+'
def sl4fjVersion = '2.+'

dependencies {
    api group: 'org.jetbrains', name: 'annotations', version: '23.+'
    api group: 'com.google.api.grpc', name: 'proto-google-common-protos', version: '*'
    api group: 'args4j', name: 'args4j', version: '2.+'
    implementation group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'
    implementation group: 'com.google.guava', name: 'guava', version: '*'
    implementation group: 'io.grpc', name: 'grpc-netty-shaded', version: grpcVersion
    implementation group: 'io.grpc', name: 'grpc-protobuf', version: grpcVersion
    implementation group: 'io.grpc', name: 'grpc-stub', version: grpcVersion

    implementation group: 'com.google.protobuf', name: 'protobuf-java-util', version: protobufVersion

    implementation group: 'org.yaml', name: 'snakeyaml', version: '1.+'
    implementation group: 'com.orbitz.consul', name: 'consul-client', version: '1.+'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: sl4fjVersion

    implementation group: 'io.grpc', name: 'grpc-services', version: grpcVersion

    implementation group: 'com.google.guava', name: 'guava', version: '*'

    testImplementation group: 'org.mockito', name: 'mockito-core', version: '4.+'
    testImplementation group: 'io.grpc', name: 'grpc-testing', version: grpcVersion
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junitVersion
    testRuntimeOnly group: 'org.slf4j', name: 'slf4j-simple', version: sl4fjVersion
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junitVersion
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protobufVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true
}

tasks.withType(Jar).all {
    duplicatesStrategy 'exclude'
}

test {
    useJUnitPlatform()
}

task printVersion() {
    printf(version)
}

shadowJar {
    manifest {
        attributes 'Implementation-Title': 'MTAP',
                'Implementation-Version': archiveVersion
    }
    mergeServiceFiles()
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version

            from components.java
            artifacts = [jar, sourcesJar, javadocJar]
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            pom {
                name = 'Microservice Text Analysis Platform'
                description = 'A framework for distributed text analysis using gRPC and ' +
                        'microservices-based architecture.'
                url = 'https://nlpie.github.io/mtap'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'nlpie'
                        name = 'NLP/IE Group'
                        email = 'nlp-ie@umn.edu'
                    }
                    developer {
                        id = 'benknoll_umn'
                        name = 'Ben Knoll'
                        email = 'benknoll@umn.edu'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/nlpie/mtap.git'
                    developerConnection = 'scm:git:https://github.com/nlpie/mtap.git'
                    url = 'http://github.com/nlpie/mtap'
                }

            }
        }
    }
    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username project.hasProperty('sonatypeUsername') ? sonatypeUsername : null
                password project.hasProperty('sonatypePassword') ? sonatypePassword : null
            }
        }
    }
}

signing {
    useGpgCmd()
    sign publishing.publications.mavenJava
}

javadoc {
    exclude "edu/umn/nlpie/mtap/api/**"
    exclude "grpc"
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

task execute(type: JavaExec) {
    classpath = sourceSets.withLogBinding.runtimeClasspath
    setMainClass project.hasProperty('mainClass') ? project.getProperties().get('mainClass') : null
}
