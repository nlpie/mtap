// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mtap/api/v1/events.proto

package mtap_api_v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	duration "github.com/golang/protobuf/ptypes/duration"
	_struct "github.com/golang/protobuf/ptypes/struct"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetLabelIndicesInfoResponse_LabelIndexInfo_LabelIndexType int32

const (
	// Default, no labels field set or not known.
	GetLabelIndicesInfoResponse_LabelIndexInfo_UNKNOWN GetLabelIndicesInfoResponse_LabelIndexInfo_LabelIndexType = 0
	// Has the "generic_labels" field set.
	GetLabelIndicesInfoResponse_LabelIndexInfo_GENERIC GetLabelIndicesInfoResponse_LabelIndexInfo_LabelIndexType = 1
	// Has the "custom_labels" field set.
	GetLabelIndicesInfoResponse_LabelIndexInfo_CUSTOM GetLabelIndicesInfoResponse_LabelIndexInfo_LabelIndexType = 2
)

var GetLabelIndicesInfoResponse_LabelIndexInfo_LabelIndexType_name = map[int32]string{
	0: "UNKNOWN",
	1: "GENERIC",
	2: "CUSTOM",
}

var GetLabelIndicesInfoResponse_LabelIndexInfo_LabelIndexType_value = map[string]int32{
	"UNKNOWN": 0,
	"GENERIC": 1,
	"CUSTOM":  2,
}

func (x GetLabelIndicesInfoResponse_LabelIndexInfo_LabelIndexType) String() string {
	return proto.EnumName(GetLabelIndicesInfoResponse_LabelIndexInfo_LabelIndexType_name, int32(x))
}

func (GetLabelIndicesInfoResponse_LabelIndexInfo_LabelIndexType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_df12139ef613a759, []int{21, 0, 0}
}

// A request to open an event, retrieves a lease that prevents the service from
// de-allocating the event.
type OpenEventRequest struct {
	// The globally unique event identifier.
	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// Only create a new event, failing if the event already exists.
	OnlyCreateNew bool `protobuf:"varint,2,opt,name=only_create_new,json=onlyCreateNew,proto3" json:"only_create_new,omitempty"`
	// Optional, how long the lease is valid for.
	LeaseDuration        *duration.Duration `protobuf:"bytes,3,opt,name=lease_duration,json=leaseDuration,proto3" json:"lease_duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *OpenEventRequest) Reset()         { *m = OpenEventRequest{} }
func (m *OpenEventRequest) String() string { return proto.CompactTextString(m) }
func (*OpenEventRequest) ProtoMessage()    {}
func (*OpenEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df12139ef613a759, []int{0}
}

func (m *OpenEventRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpenEventRequest.Unmarshal(m, b)
}
func (m *OpenEventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpenEventRequest.Marshal(b, m, deterministic)
}
func (m *OpenEventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenEventRequest.Merge(m, src)
}
func (m *OpenEventRequest) XXX_Size() int {
	return xxx_messageInfo_OpenEventRequest.Size(m)
}
func (m *OpenEventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenEventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OpenEventRequest proto.InternalMessageInfo

func (m *OpenEventRequest) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *OpenEventRequest) GetOnlyCreateNew() bool {
	if m != nil {
		return m.OnlyCreateNew
	}
	return false
}

func (m *OpenEventRequest) GetLeaseDuration() *duration.Duration {
	if m != nil {
		return m.LeaseDuration
	}
	return nil
}

// The response from the service for the open event endpoint.
type OpenEventResponse struct {
	// Whether the service created a new event.
	Created bool `protobuf:"varint,1,opt,name=created,proto3" json:"created,omitempty"`
	// Optional, if the lease has a duration, an identifier which can be used to
	// cede the lease, which will prevent the lease from being ceded twice.
	LeaseId              int32    `protobuf:"varint,2,opt,name=lease_id,json=leaseId,proto3" json:"lease_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpenEventResponse) Reset()         { *m = OpenEventResponse{} }
func (m *OpenEventResponse) String() string { return proto.CompactTextString(m) }
func (*OpenEventResponse) ProtoMessage()    {}
func (*OpenEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_df12139ef613a759, []int{1}
}

func (m *OpenEventResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpenEventResponse.Unmarshal(m, b)
}
func (m *OpenEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpenEventResponse.Marshal(b, m, deterministic)
}
func (m *OpenEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenEventResponse.Merge(m, src)
}
func (m *OpenEventResponse) XXX_Size() int {
	return xxx_messageInfo_OpenEventResponse.Size(m)
}
func (m *OpenEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OpenEventResponse proto.InternalMessageInfo

func (m *OpenEventResponse) GetCreated() bool {
	if m != nil {
		return m.Created
	}
	return false
}

func (m *OpenEventResponse) GetLeaseId() int32 {
	if m != nil {
		return m.LeaseId
	}
	return 0
}

// Cedes a lease to an event.
type CloseEventRequest struct {
	// The event_id to release.
	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// Optional, if the lease has a timed expiration, this is required to prevent
	// releasing the lease twice.
	LeaseId              int32    `protobuf:"varint,2,opt,name=lease_id,json=leaseId,proto3" json:"lease_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloseEventRequest) Reset()         { *m = CloseEventRequest{} }
func (m *CloseEventRequest) String() string { return proto.CompactTextString(m) }
func (*CloseEventRequest) ProtoMessage()    {}
func (*CloseEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df12139ef613a759, []int{2}
}

func (m *CloseEventRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloseEventRequest.Unmarshal(m, b)
}
func (m *CloseEventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloseEventRequest.Marshal(b, m, deterministic)
}
func (m *CloseEventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseEventRequest.Merge(m, src)
}
func (m *CloseEventRequest) XXX_Size() int {
	return xxx_messageInfo_CloseEventRequest.Size(m)
}
func (m *CloseEventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseEventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CloseEventRequest proto.InternalMessageInfo

func (m *CloseEventRequest) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *CloseEventRequest) GetLeaseId() int32 {
	if m != nil {
		return m.LeaseId
	}
	return 0
}

// Response from the service for closing events.
type CloseEventResponse struct {
	// If the event was deleted after a close.
	Deleted              bool     `protobuf:"varint,1,opt,name=deleted,proto3" json:"deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloseEventResponse) Reset()         { *m = CloseEventResponse{} }
func (m *CloseEventResponse) String() string { return proto.CompactTextString(m) }
func (*CloseEventResponse) ProtoMessage()    {}
func (*CloseEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_df12139ef613a759, []int{3}
}

func (m *CloseEventResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloseEventResponse.Unmarshal(m, b)
}
func (m *CloseEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloseEventResponse.Marshal(b, m, deterministic)
}
func (m *CloseEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseEventResponse.Merge(m, src)
}
func (m *CloseEventResponse) XXX_Size() int {
	return xxx_messageInfo_CloseEventResponse.Size(m)
}
func (m *CloseEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CloseEventResponse proto.InternalMessageInfo

func (m *CloseEventResponse) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

// Request for all metadata associated with an event
type GetAllMetadataRequest struct {
	// Event unique identifier string.
	EventId              string   `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllMetadataRequest) Reset()         { *m = GetAllMetadataRequest{} }
func (m *GetAllMetadataRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllMetadataRequest) ProtoMessage()    {}
func (*GetAllMetadataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df12139ef613a759, []int{4}
}

func (m *GetAllMetadataRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAllMetadataRequest.Unmarshal(m, b)
}
func (m *GetAllMetadataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAllMetadataRequest.Marshal(b, m, deterministic)
}
func (m *GetAllMetadataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllMetadataRequest.Merge(m, src)
}
func (m *GetAllMetadataRequest) XXX_Size() int {
	return xxx_messageInfo_GetAllMetadataRequest.Size(m)
}
func (m *GetAllMetadataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllMetadataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllMetadataRequest proto.InternalMessageInfo

func (m *GetAllMetadataRequest) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

// Response from the server for all metadata associated with an event.
type GetAllMetadataResponse struct {
	// The metadata map for the event
	Metadata             map[string]string `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetAllMetadataResponse) Reset()         { *m = GetAllMetadataResponse{} }
func (m *GetAllMetadataResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllMetadataResponse) ProtoMessage()    {}
func (*GetAllMetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_df12139ef613a759, []int{5}
}

func (m *GetAllMetadataResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAllMetadataResponse.Unmarshal(m, b)
}
func (m *GetAllMetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAllMetadataResponse.Marshal(b, m, deterministic)
}
func (m *GetAllMetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllMetadataResponse.Merge(m, src)
}
func (m *GetAllMetadataResponse) XXX_Size() int {
	return xxx_messageInfo_GetAllMetadataResponse.Size(m)
}
func (m *GetAllMetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllMetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllMetadataResponse proto.InternalMessageInfo

func (m *GetAllMetadataResponse) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// Request to add a metadata entry to the events service
type AddMetadataRequest struct {
	// The unique event identifier.
	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// The key for the metadata entry
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// The value for the metadata entry.
	Value                string   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddMetadataRequest) Reset()         { *m = AddMetadataRequest{} }
func (m *AddMetadataRequest) String() string { return proto.CompactTextString(m) }
func (*AddMetadataRequest) ProtoMessage()    {}
func (*AddMetadataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df12139ef613a759, []int{6}
}

func (m *AddMetadataRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddMetadataRequest.Unmarshal(m, b)
}
func (m *AddMetadataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddMetadataRequest.Marshal(b, m, deterministic)
}
func (m *AddMetadataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddMetadataRequest.Merge(m, src)
}
func (m *AddMetadataRequest) XXX_Size() int {
	return xxx_messageInfo_AddMetadataRequest.Size(m)
}
func (m *AddMetadataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddMetadataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddMetadataRequest proto.InternalMessageInfo

func (m *AddMetadataRequest) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *AddMetadataRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *AddMetadataRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Response from the server for adding a metadata entry.
type AddMetadataResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddMetadataResponse) Reset()         { *m = AddMetadataResponse{} }
func (m *AddMetadataResponse) String() string { return proto.CompactTextString(m) }
func (*AddMetadataResponse) ProtoMessage()    {}
func (*AddMetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_df12139ef613a759, []int{7}
}

func (m *AddMetadataResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddMetadataResponse.Unmarshal(m, b)
}
func (m *AddMetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddMetadataResponse.Marshal(b, m, deterministic)
}
func (m *AddMetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddMetadataResponse.Merge(m, src)
}
func (m *AddMetadataResponse) XXX_Size() int {
	return xxx_messageInfo_AddMetadataResponse.Size(m)
}
func (m *AddMetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddMetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddMetadataResponse proto.InternalMessageInfo

// Request to get the keys for all binary data stored on the event.
type GetAllBinaryDataNamesRequest struct {
	// The unique event identifier.
	EventId              string   `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllBinaryDataNamesRequest) Reset()         { *m = GetAllBinaryDataNamesRequest{} }
func (m *GetAllBinaryDataNamesRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllBinaryDataNamesRequest) ProtoMessage()    {}
func (*GetAllBinaryDataNamesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df12139ef613a759, []int{8}
}

func (m *GetAllBinaryDataNamesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAllBinaryDataNamesRequest.Unmarshal(m, b)
}
func (m *GetAllBinaryDataNamesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAllBinaryDataNamesRequest.Marshal(b, m, deterministic)
}
func (m *GetAllBinaryDataNamesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllBinaryDataNamesRequest.Merge(m, src)
}
func (m *GetAllBinaryDataNamesRequest) XXX_Size() int {
	return xxx_messageInfo_GetAllBinaryDataNamesRequest.Size(m)
}
func (m *GetAllBinaryDataNamesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllBinaryDataNamesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllBinaryDataNamesRequest proto.InternalMessageInfo

func (m *GetAllBinaryDataNamesRequest) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

// Response of all the binary names on the event.
type GetAllBinaryDataNamesResponse struct {
	BinaryDataNames      []string `protobuf:"bytes,1,rep,name=binary_data_names,json=binaryDataNames,proto3" json:"binary_data_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllBinaryDataNamesResponse) Reset()         { *m = GetAllBinaryDataNamesResponse{} }
func (m *GetAllBinaryDataNamesResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllBinaryDataNamesResponse) ProtoMessage()    {}
func (*GetAllBinaryDataNamesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_df12139ef613a759, []int{9}
}

func (m *GetAllBinaryDataNamesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAllBinaryDataNamesResponse.Unmarshal(m, b)
}
func (m *GetAllBinaryDataNamesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAllBinaryDataNamesResponse.Marshal(b, m, deterministic)
}
func (m *GetAllBinaryDataNamesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllBinaryDataNamesResponse.Merge(m, src)
}
func (m *GetAllBinaryDataNamesResponse) XXX_Size() int {
	return xxx_messageInfo_GetAllBinaryDataNamesResponse.Size(m)
}
func (m *GetAllBinaryDataNamesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllBinaryDataNamesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllBinaryDataNamesResponse proto.InternalMessageInfo

func (m *GetAllBinaryDataNamesResponse) GetBinaryDataNames() []string {
	if m != nil {
		return m.BinaryDataNames
	}
	return nil
}

// Request to attach binary data to the event.
type AddBinaryDataRequest struct {
	// The unique event identifier.
	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// The binary data key.
	BinaryDataName string `protobuf:"bytes,2,opt,name=binary_data_name,json=binaryDataName,proto3" json:"binary_data_name,omitempty"`
	// The binary data.
	BinaryData           []byte   `protobuf:"bytes,3,opt,name=binary_data,json=binaryData,proto3" json:"binary_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddBinaryDataRequest) Reset()         { *m = AddBinaryDataRequest{} }
func (m *AddBinaryDataRequest) String() string { return proto.CompactTextString(m) }
func (*AddBinaryDataRequest) ProtoMessage()    {}
func (*AddBinaryDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df12139ef613a759, []int{10}
}

func (m *AddBinaryDataRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddBinaryDataRequest.Unmarshal(m, b)
}
func (m *AddBinaryDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddBinaryDataRequest.Marshal(b, m, deterministic)
}
func (m *AddBinaryDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddBinaryDataRequest.Merge(m, src)
}
func (m *AddBinaryDataRequest) XXX_Size() int {
	return xxx_messageInfo_AddBinaryDataRequest.Size(m)
}
func (m *AddBinaryDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddBinaryDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddBinaryDataRequest proto.InternalMessageInfo

func (m *AddBinaryDataRequest) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *AddBinaryDataRequest) GetBinaryDataName() string {
	if m != nil {
		return m.BinaryDataName
	}
	return ""
}

func (m *AddBinaryDataRequest) GetBinaryData() []byte {
	if m != nil {
		return m.BinaryData
	}
	return nil
}

// Response after attaching binary data to the event.
type AddBinaryDataResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddBinaryDataResponse) Reset()         { *m = AddBinaryDataResponse{} }
func (m *AddBinaryDataResponse) String() string { return proto.CompactTextString(m) }
func (*AddBinaryDataResponse) ProtoMessage()    {}
func (*AddBinaryDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_df12139ef613a759, []int{11}
}

func (m *AddBinaryDataResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddBinaryDataResponse.Unmarshal(m, b)
}
func (m *AddBinaryDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddBinaryDataResponse.Marshal(b, m, deterministic)
}
func (m *AddBinaryDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddBinaryDataResponse.Merge(m, src)
}
func (m *AddBinaryDataResponse) XXX_Size() int {
	return xxx_messageInfo_AddBinaryDataResponse.Size(m)
}
func (m *AddBinaryDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddBinaryDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddBinaryDataResponse proto.InternalMessageInfo

// Request for binary data on an event associated with a specific name.
type GetBinaryDataRequest struct {
	// The unique event identifier.
	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// The binary data key.
	BinaryDataName       string   `protobuf:"bytes,2,opt,name=binary_data_name,json=binaryDataName,proto3" json:"binary_data_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBinaryDataRequest) Reset()         { *m = GetBinaryDataRequest{} }
func (m *GetBinaryDataRequest) String() string { return proto.CompactTextString(m) }
func (*GetBinaryDataRequest) ProtoMessage()    {}
func (*GetBinaryDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df12139ef613a759, []int{12}
}

func (m *GetBinaryDataRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBinaryDataRequest.Unmarshal(m, b)
}
func (m *GetBinaryDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBinaryDataRequest.Marshal(b, m, deterministic)
}
func (m *GetBinaryDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBinaryDataRequest.Merge(m, src)
}
func (m *GetBinaryDataRequest) XXX_Size() int {
	return xxx_messageInfo_GetBinaryDataRequest.Size(m)
}
func (m *GetBinaryDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBinaryDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBinaryDataRequest proto.InternalMessageInfo

func (m *GetBinaryDataRequest) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *GetBinaryDataRequest) GetBinaryDataName() string {
	if m != nil {
		return m.BinaryDataName
	}
	return ""
}

type GetBinaryDataResponse struct {
	// The binary data.
	BinaryData           []byte   `protobuf:"bytes,1,opt,name=binary_data,json=binaryData,proto3" json:"binary_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBinaryDataResponse) Reset()         { *m = GetBinaryDataResponse{} }
func (m *GetBinaryDataResponse) String() string { return proto.CompactTextString(m) }
func (*GetBinaryDataResponse) ProtoMessage()    {}
func (*GetBinaryDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_df12139ef613a759, []int{13}
}

func (m *GetBinaryDataResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBinaryDataResponse.Unmarshal(m, b)
}
func (m *GetBinaryDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBinaryDataResponse.Marshal(b, m, deterministic)
}
func (m *GetBinaryDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBinaryDataResponse.Merge(m, src)
}
func (m *GetBinaryDataResponse) XXX_Size() int {
	return xxx_messageInfo_GetBinaryDataResponse.Size(m)
}
func (m *GetBinaryDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBinaryDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBinaryDataResponse proto.InternalMessageInfo

func (m *GetBinaryDataResponse) GetBinaryData() []byte {
	if m != nil {
		return m.BinaryData
	}
	return nil
}

// Request to add a document to an event.
type AddDocumentRequest struct {
	// The unique event identifier.
	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// The event-unique document name.
	DocumentName string `protobuf:"bytes,2,opt,name=document_name,json=documentName,proto3" json:"document_name,omitempty"`
	// The document text.
	Text                 string   `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddDocumentRequest) Reset()         { *m = AddDocumentRequest{} }
func (m *AddDocumentRequest) String() string { return proto.CompactTextString(m) }
func (*AddDocumentRequest) ProtoMessage()    {}
func (*AddDocumentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df12139ef613a759, []int{14}
}

func (m *AddDocumentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddDocumentRequest.Unmarshal(m, b)
}
func (m *AddDocumentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddDocumentRequest.Marshal(b, m, deterministic)
}
func (m *AddDocumentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddDocumentRequest.Merge(m, src)
}
func (m *AddDocumentRequest) XXX_Size() int {
	return xxx_messageInfo_AddDocumentRequest.Size(m)
}
func (m *AddDocumentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddDocumentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddDocumentRequest proto.InternalMessageInfo

func (m *AddDocumentRequest) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *AddDocumentRequest) GetDocumentName() string {
	if m != nil {
		return m.DocumentName
	}
	return ""
}

func (m *AddDocumentRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

// Response from the service when adding a document.
type AddDocumentResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddDocumentResponse) Reset()         { *m = AddDocumentResponse{} }
func (m *AddDocumentResponse) String() string { return proto.CompactTextString(m) }
func (*AddDocumentResponse) ProtoMessage()    {}
func (*AddDocumentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_df12139ef613a759, []int{15}
}

func (m *AddDocumentResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddDocumentResponse.Unmarshal(m, b)
}
func (m *AddDocumentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddDocumentResponse.Marshal(b, m, deterministic)
}
func (m *AddDocumentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddDocumentResponse.Merge(m, src)
}
func (m *AddDocumentResponse) XXX_Size() int {
	return xxx_messageInfo_AddDocumentResponse.Size(m)
}
func (m *AddDocumentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddDocumentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddDocumentResponse proto.InternalMessageInfo

// Request to get the names of all documents for an event.
type GetAllDocumentNamesRequest struct {
	// The unique event identifier.
	EventId              string   `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllDocumentNamesRequest) Reset()         { *m = GetAllDocumentNamesRequest{} }
func (m *GetAllDocumentNamesRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllDocumentNamesRequest) ProtoMessage()    {}
func (*GetAllDocumentNamesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df12139ef613a759, []int{16}
}

func (m *GetAllDocumentNamesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAllDocumentNamesRequest.Unmarshal(m, b)
}
func (m *GetAllDocumentNamesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAllDocumentNamesRequest.Marshal(b, m, deterministic)
}
func (m *GetAllDocumentNamesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllDocumentNamesRequest.Merge(m, src)
}
func (m *GetAllDocumentNamesRequest) XXX_Size() int {
	return xxx_messageInfo_GetAllDocumentNamesRequest.Size(m)
}
func (m *GetAllDocumentNamesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllDocumentNamesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllDocumentNamesRequest proto.InternalMessageInfo

func (m *GetAllDocumentNamesRequest) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

// Response of all the document names on an event.
type GetAllDocumentNamesResponse struct {
	// Repeated field containing all documents for the event.
	DocumentNames        []string `protobuf:"bytes,1,rep,name=document_names,json=documentNames,proto3" json:"document_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllDocumentNamesResponse) Reset()         { *m = GetAllDocumentNamesResponse{} }
func (m *GetAllDocumentNamesResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllDocumentNamesResponse) ProtoMessage()    {}
func (*GetAllDocumentNamesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_df12139ef613a759, []int{17}
}

func (m *GetAllDocumentNamesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAllDocumentNamesResponse.Unmarshal(m, b)
}
func (m *GetAllDocumentNamesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAllDocumentNamesResponse.Marshal(b, m, deterministic)
}
func (m *GetAllDocumentNamesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllDocumentNamesResponse.Merge(m, src)
}
func (m *GetAllDocumentNamesResponse) XXX_Size() int {
	return xxx_messageInfo_GetAllDocumentNamesResponse.Size(m)
}
func (m *GetAllDocumentNamesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllDocumentNamesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllDocumentNamesResponse proto.InternalMessageInfo

func (m *GetAllDocumentNamesResponse) GetDocumentNames() []string {
	if m != nil {
		return m.DocumentNames
	}
	return nil
}

// Request to get the document text.
type GetDocumentTextRequest struct {
	// Unique event identifier that the document occurs on.
	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// Retrieves the text of the document with this name.
	DocumentName         string   `protobuf:"bytes,2,opt,name=document_name,json=documentName,proto3" json:"document_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDocumentTextRequest) Reset()         { *m = GetDocumentTextRequest{} }
func (m *GetDocumentTextRequest) String() string { return proto.CompactTextString(m) }
func (*GetDocumentTextRequest) ProtoMessage()    {}
func (*GetDocumentTextRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df12139ef613a759, []int{18}
}

func (m *GetDocumentTextRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDocumentTextRequest.Unmarshal(m, b)
}
func (m *GetDocumentTextRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDocumentTextRequest.Marshal(b, m, deterministic)
}
func (m *GetDocumentTextRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDocumentTextRequest.Merge(m, src)
}
func (m *GetDocumentTextRequest) XXX_Size() int {
	return xxx_messageInfo_GetDocumentTextRequest.Size(m)
}
func (m *GetDocumentTextRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDocumentTextRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDocumentTextRequest proto.InternalMessageInfo

func (m *GetDocumentTextRequest) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *GetDocumentTextRequest) GetDocumentName() string {
	if m != nil {
		return m.DocumentName
	}
	return ""
}

// Response for getting the document text.
type GetDocumentTextResponse struct {
	// The text of the document.
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDocumentTextResponse) Reset()         { *m = GetDocumentTextResponse{} }
func (m *GetDocumentTextResponse) String() string { return proto.CompactTextString(m) }
func (*GetDocumentTextResponse) ProtoMessage()    {}
func (*GetDocumentTextResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_df12139ef613a759, []int{19}
}

func (m *GetDocumentTextResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDocumentTextResponse.Unmarshal(m, b)
}
func (m *GetDocumentTextResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDocumentTextResponse.Marshal(b, m, deterministic)
}
func (m *GetDocumentTextResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDocumentTextResponse.Merge(m, src)
}
func (m *GetDocumentTextResponse) XXX_Size() int {
	return xxx_messageInfo_GetDocumentTextResponse.Size(m)
}
func (m *GetDocumentTextResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDocumentTextResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDocumentTextResponse proto.InternalMessageInfo

func (m *GetDocumentTextResponse) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

// Request to get information about the label indices on a document.
type GetLabelIndicesInfoRequest struct {
	// The unique event identifier.
	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// The document name on the event.
	DocumentName         string   `protobuf:"bytes,2,opt,name=document_name,json=documentName,proto3" json:"document_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetLabelIndicesInfoRequest) Reset()         { *m = GetLabelIndicesInfoRequest{} }
func (m *GetLabelIndicesInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetLabelIndicesInfoRequest) ProtoMessage()    {}
func (*GetLabelIndicesInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df12139ef613a759, []int{20}
}

func (m *GetLabelIndicesInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetLabelIndicesInfoRequest.Unmarshal(m, b)
}
func (m *GetLabelIndicesInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetLabelIndicesInfoRequest.Marshal(b, m, deterministic)
}
func (m *GetLabelIndicesInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLabelIndicesInfoRequest.Merge(m, src)
}
func (m *GetLabelIndicesInfoRequest) XXX_Size() int {
	return xxx_messageInfo_GetLabelIndicesInfoRequest.Size(m)
}
func (m *GetLabelIndicesInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLabelIndicesInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLabelIndicesInfoRequest proto.InternalMessageInfo

func (m *GetLabelIndicesInfoRequest) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *GetLabelIndicesInfoRequest) GetDocumentName() string {
	if m != nil {
		return m.DocumentName
	}
	return ""
}

// Response of information about the label indices on a document.
type GetLabelIndicesInfoResponse struct {
	// Info about each label index on the document.
	LabelIndexInfos      []*GetLabelIndicesInfoResponse_LabelIndexInfo `protobuf:"bytes,1,rep,name=label_index_infos,json=labelIndexInfos,proto3" json:"label_index_infos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                      `json:"-"`
	XXX_unrecognized     []byte                                        `json:"-"`
	XXX_sizecache        int32                                         `json:"-"`
}

func (m *GetLabelIndicesInfoResponse) Reset()         { *m = GetLabelIndicesInfoResponse{} }
func (m *GetLabelIndicesInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetLabelIndicesInfoResponse) ProtoMessage()    {}
func (*GetLabelIndicesInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_df12139ef613a759, []int{21}
}

func (m *GetLabelIndicesInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetLabelIndicesInfoResponse.Unmarshal(m, b)
}
func (m *GetLabelIndicesInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetLabelIndicesInfoResponse.Marshal(b, m, deterministic)
}
func (m *GetLabelIndicesInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLabelIndicesInfoResponse.Merge(m, src)
}
func (m *GetLabelIndicesInfoResponse) XXX_Size() int {
	return xxx_messageInfo_GetLabelIndicesInfoResponse.Size(m)
}
func (m *GetLabelIndicesInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLabelIndicesInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetLabelIndicesInfoResponse proto.InternalMessageInfo

func (m *GetLabelIndicesInfoResponse) GetLabelIndexInfos() []*GetLabelIndicesInfoResponse_LabelIndexInfo {
	if m != nil {
		return m.LabelIndexInfos
	}
	return nil
}

type GetLabelIndicesInfoResponse_LabelIndexInfo struct {
	// A document-unique identifier for the index on the document.
	IndexName            string                                                    `protobuf:"bytes,1,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
	Type                 GetLabelIndicesInfoResponse_LabelIndexInfo_LabelIndexType `protobuf:"varint,2,opt,name=type,proto3,enum=mtap.api.v1.GetLabelIndicesInfoResponse_LabelIndexInfo_LabelIndexType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                  `json:"-"`
	XXX_unrecognized     []byte                                                    `json:"-"`
	XXX_sizecache        int32                                                     `json:"-"`
}

func (m *GetLabelIndicesInfoResponse_LabelIndexInfo) Reset() {
	*m = GetLabelIndicesInfoResponse_LabelIndexInfo{}
}
func (m *GetLabelIndicesInfoResponse_LabelIndexInfo) String() string {
	return proto.CompactTextString(m)
}
func (*GetLabelIndicesInfoResponse_LabelIndexInfo) ProtoMessage() {}
func (*GetLabelIndicesInfoResponse_LabelIndexInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_df12139ef613a759, []int{21, 0}
}

func (m *GetLabelIndicesInfoResponse_LabelIndexInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetLabelIndicesInfoResponse_LabelIndexInfo.Unmarshal(m, b)
}
func (m *GetLabelIndicesInfoResponse_LabelIndexInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetLabelIndicesInfoResponse_LabelIndexInfo.Marshal(b, m, deterministic)
}
func (m *GetLabelIndicesInfoResponse_LabelIndexInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLabelIndicesInfoResponse_LabelIndexInfo.Merge(m, src)
}
func (m *GetLabelIndicesInfoResponse_LabelIndexInfo) XXX_Size() int {
	return xxx_messageInfo_GetLabelIndicesInfoResponse_LabelIndexInfo.Size(m)
}
func (m *GetLabelIndicesInfoResponse_LabelIndexInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLabelIndicesInfoResponse_LabelIndexInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GetLabelIndicesInfoResponse_LabelIndexInfo proto.InternalMessageInfo

func (m *GetLabelIndicesInfoResponse_LabelIndexInfo) GetIndexName() string {
	if m != nil {
		return m.IndexName
	}
	return ""
}

func (m *GetLabelIndicesInfoResponse_LabelIndexInfo) GetType() GetLabelIndicesInfoResponse_LabelIndexInfo_LabelIndexType {
	if m != nil {
		return m.Type
	}
	return GetLabelIndicesInfoResponse_LabelIndexInfo_UNKNOWN
}

// Request to add labels to a document.
type AddLabelsRequest struct {
	// The unique event identifier.
	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// The document name on the event.
	DocumentName string `protobuf:"bytes,2,opt,name=document_name,json=documentName,proto3" json:"document_name,omitempty"`
	// A document-unique identifier for the index to create on the document.
	IndexName string `protobuf:"bytes,3,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
	// The labels to store on the event service.
	//
	// Types that are valid to be assigned to Labels:
	//	*AddLabelsRequest_GenericLabels
	//	*AddLabelsRequest_CustomLabels
	Labels isAddLabelsRequest_Labels `protobuf_oneof:"labels"`
	// Set to "true" if the client validates label field keys so to ensure that no reserved key names
	// occur. The key names that are reserved are "text", "document", and "location".
	NoKeyValidation      bool     `protobuf:"varint,6,opt,name=no_key_validation,json=noKeyValidation,proto3" json:"no_key_validation,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddLabelsRequest) Reset()         { *m = AddLabelsRequest{} }
func (m *AddLabelsRequest) String() string { return proto.CompactTextString(m) }
func (*AddLabelsRequest) ProtoMessage()    {}
func (*AddLabelsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df12139ef613a759, []int{22}
}

func (m *AddLabelsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddLabelsRequest.Unmarshal(m, b)
}
func (m *AddLabelsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddLabelsRequest.Marshal(b, m, deterministic)
}
func (m *AddLabelsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddLabelsRequest.Merge(m, src)
}
func (m *AddLabelsRequest) XXX_Size() int {
	return xxx_messageInfo_AddLabelsRequest.Size(m)
}
func (m *AddLabelsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddLabelsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddLabelsRequest proto.InternalMessageInfo

func (m *AddLabelsRequest) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *AddLabelsRequest) GetDocumentName() string {
	if m != nil {
		return m.DocumentName
	}
	return ""
}

func (m *AddLabelsRequest) GetIndexName() string {
	if m != nil {
		return m.IndexName
	}
	return ""
}

type isAddLabelsRequest_Labels interface {
	isAddLabelsRequest_Labels()
}

type AddLabelsRequest_GenericLabels struct {
	GenericLabels *GenericLabels `protobuf:"bytes,4,opt,name=generic_labels,json=genericLabels,proto3,oneof"`
}

type AddLabelsRequest_CustomLabels struct {
	CustomLabels *any.Any `protobuf:"bytes,5,opt,name=custom_labels,json=customLabels,proto3,oneof"`
}

func (*AddLabelsRequest_GenericLabels) isAddLabelsRequest_Labels() {}

func (*AddLabelsRequest_CustomLabels) isAddLabelsRequest_Labels() {}

func (m *AddLabelsRequest) GetLabels() isAddLabelsRequest_Labels {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *AddLabelsRequest) GetGenericLabels() *GenericLabels {
	if x, ok := m.GetLabels().(*AddLabelsRequest_GenericLabels); ok {
		return x.GenericLabels
	}
	return nil
}

func (m *AddLabelsRequest) GetCustomLabels() *any.Any {
	if x, ok := m.GetLabels().(*AddLabelsRequest_CustomLabels); ok {
		return x.CustomLabels
	}
	return nil
}

func (m *AddLabelsRequest) GetNoKeyValidation() bool {
	if m != nil {
		return m.NoKeyValidation
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AddLabelsRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AddLabelsRequest_GenericLabels)(nil),
		(*AddLabelsRequest_CustomLabels)(nil),
	}
}

// Response for adding labels to the events service.
type AddLabelsResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddLabelsResponse) Reset()         { *m = AddLabelsResponse{} }
func (m *AddLabelsResponse) String() string { return proto.CompactTextString(m) }
func (*AddLabelsResponse) ProtoMessage()    {}
func (*AddLabelsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_df12139ef613a759, []int{23}
}

func (m *AddLabelsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddLabelsResponse.Unmarshal(m, b)
}
func (m *AddLabelsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddLabelsResponse.Marshal(b, m, deterministic)
}
func (m *AddLabelsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddLabelsResponse.Merge(m, src)
}
func (m *AddLabelsResponse) XXX_Size() int {
	return xxx_messageInfo_AddLabelsResponse.Size(m)
}
func (m *AddLabelsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddLabelsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddLabelsResponse proto.InternalMessageInfo

// Request for getting existing labels from the events service.
type GetLabelsRequest struct {
	// The event that contains the document and labels.
	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// The document that contains the labels.
	DocumentName string `protobuf:"bytes,2,opt,name=document_name,json=documentName,proto3" json:"document_name,omitempty"`
	// The index name of the labels on the document.
	IndexName            string   `protobuf:"bytes,3,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetLabelsRequest) Reset()         { *m = GetLabelsRequest{} }
func (m *GetLabelsRequest) String() string { return proto.CompactTextString(m) }
func (*GetLabelsRequest) ProtoMessage()    {}
func (*GetLabelsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df12139ef613a759, []int{24}
}

func (m *GetLabelsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetLabelsRequest.Unmarshal(m, b)
}
func (m *GetLabelsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetLabelsRequest.Marshal(b, m, deterministic)
}
func (m *GetLabelsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLabelsRequest.Merge(m, src)
}
func (m *GetLabelsRequest) XXX_Size() int {
	return xxx_messageInfo_GetLabelsRequest.Size(m)
}
func (m *GetLabelsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLabelsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLabelsRequest proto.InternalMessageInfo

func (m *GetLabelsRequest) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *GetLabelsRequest) GetDocumentName() string {
	if m != nil {
		return m.DocumentName
	}
	return ""
}

func (m *GetLabelsRequest) GetIndexName() string {
	if m != nil {
		return m.IndexName
	}
	return ""
}

// A Label Index of dynamic Labels, which are client/processor specified data
// objects containing information about an area of text.
type GenericLabels struct {
	// Whether the label index is distinct, i.e. only consists of non-overlapping,
	// non-empty spans of text.
	IsDistinct bool `protobuf:"varint,1,opt,name=is_distinct,json=isDistinct,proto3" json:"is_distinct,omitempty"`
	// The labels, which are dynamic JSON objects and must contain the number
	// fields "start_index" and "end_index". Any other fields are application-
	// specific and dynamic.
	Labels               []*GenericLabel `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GenericLabels) Reset()         { *m = GenericLabels{} }
func (m *GenericLabels) String() string { return proto.CompactTextString(m) }
func (*GenericLabels) ProtoMessage()    {}
func (*GenericLabels) Descriptor() ([]byte, []int) {
	return fileDescriptor_df12139ef613a759, []int{25}
}

func (m *GenericLabels) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenericLabels.Unmarshal(m, b)
}
func (m *GenericLabels) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenericLabels.Marshal(b, m, deterministic)
}
func (m *GenericLabels) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenericLabels.Merge(m, src)
}
func (m *GenericLabels) XXX_Size() int {
	return xxx_messageInfo_GenericLabels.Size(m)
}
func (m *GenericLabels) XXX_DiscardUnknown() {
	xxx_messageInfo_GenericLabels.DiscardUnknown(m)
}

var xxx_messageInfo_GenericLabels proto.InternalMessageInfo

func (m *GenericLabels) GetIsDistinct() bool {
	if m != nil {
		return m.IsDistinct
	}
	return false
}

func (m *GenericLabels) GetLabels() []*GenericLabel {
	if m != nil {
		return m.Labels
	}
	return nil
}

type GenericLabel struct {
	// The unique identifier for the label.
	Identifier uint32 `protobuf:"varint,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// The start offset of the label relative to the document.
	StartIndex uint32 `protobuf:"varint,2,opt,name=start_index,json=startIndex,proto3" json:"start_index,omitempty"`
	// The end offset of the label relative to the document.
	EndIndex uint32 `protobuf:"varint,3,opt,name=end_index,json=endIndex,proto3" json:"end_index,omitempty"`
	// A structure containing the dynamic primitive fields of the label.
	Fields *_struct.Struct `protobuf:"bytes,4,opt,name=fields,proto3" json:"fields,omitempty"`
	// A structure containing the reference fields of the label.
	ReferenceIds         *_struct.Struct `protobuf:"bytes,5,opt,name=reference_ids,json=referenceIds,proto3" json:"reference_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GenericLabel) Reset()         { *m = GenericLabel{} }
func (m *GenericLabel) String() string { return proto.CompactTextString(m) }
func (*GenericLabel) ProtoMessage()    {}
func (*GenericLabel) Descriptor() ([]byte, []int) {
	return fileDescriptor_df12139ef613a759, []int{26}
}

func (m *GenericLabel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenericLabel.Unmarshal(m, b)
}
func (m *GenericLabel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenericLabel.Marshal(b, m, deterministic)
}
func (m *GenericLabel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenericLabel.Merge(m, src)
}
func (m *GenericLabel) XXX_Size() int {
	return xxx_messageInfo_GenericLabel.Size(m)
}
func (m *GenericLabel) XXX_DiscardUnknown() {
	xxx_messageInfo_GenericLabel.DiscardUnknown(m)
}

var xxx_messageInfo_GenericLabel proto.InternalMessageInfo

func (m *GenericLabel) GetIdentifier() uint32 {
	if m != nil {
		return m.Identifier
	}
	return 0
}

func (m *GenericLabel) GetStartIndex() uint32 {
	if m != nil {
		return m.StartIndex
	}
	return 0
}

func (m *GenericLabel) GetEndIndex() uint32 {
	if m != nil {
		return m.EndIndex
	}
	return 0
}

func (m *GenericLabel) GetFields() *_struct.Struct {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *GenericLabel) GetReferenceIds() *_struct.Struct {
	if m != nil {
		return m.ReferenceIds
	}
	return nil
}

// The response for retrieving labels from an event and document.
type GetLabelsResponse struct {
	// The serialized label index that was originally added to the events service.
	//
	// Types that are valid to be assigned to Labels:
	//	*GetLabelsResponse_GenericLabels
	//	*GetLabelsResponse_CustomLabels
	Labels               isGetLabelsResponse_Labels `protobuf_oneof:"labels"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *GetLabelsResponse) Reset()         { *m = GetLabelsResponse{} }
func (m *GetLabelsResponse) String() string { return proto.CompactTextString(m) }
func (*GetLabelsResponse) ProtoMessage()    {}
func (*GetLabelsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_df12139ef613a759, []int{27}
}

func (m *GetLabelsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetLabelsResponse.Unmarshal(m, b)
}
func (m *GetLabelsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetLabelsResponse.Marshal(b, m, deterministic)
}
func (m *GetLabelsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLabelsResponse.Merge(m, src)
}
func (m *GetLabelsResponse) XXX_Size() int {
	return xxx_messageInfo_GetLabelsResponse.Size(m)
}
func (m *GetLabelsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLabelsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetLabelsResponse proto.InternalMessageInfo

type isGetLabelsResponse_Labels interface {
	isGetLabelsResponse_Labels()
}

type GetLabelsResponse_GenericLabels struct {
	GenericLabels *GenericLabels `protobuf:"bytes,1,opt,name=generic_labels,json=genericLabels,proto3,oneof"`
}

type GetLabelsResponse_CustomLabels struct {
	CustomLabels *any.Any `protobuf:"bytes,2,opt,name=custom_labels,json=customLabels,proto3,oneof"`
}

func (*GetLabelsResponse_GenericLabels) isGetLabelsResponse_Labels() {}

func (*GetLabelsResponse_CustomLabels) isGetLabelsResponse_Labels() {}

func (m *GetLabelsResponse) GetLabels() isGetLabelsResponse_Labels {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *GetLabelsResponse) GetGenericLabels() *GenericLabels {
	if x, ok := m.GetLabels().(*GetLabelsResponse_GenericLabels); ok {
		return x.GenericLabels
	}
	return nil
}

func (m *GetLabelsResponse) GetCustomLabels() *any.Any {
	if x, ok := m.GetLabels().(*GetLabelsResponse_CustomLabels); ok {
		return x.CustomLabels
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetLabelsResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetLabelsResponse_GenericLabels)(nil),
		(*GetLabelsResponse_CustomLabels)(nil),
	}
}

func init() {
	proto.RegisterEnum("mtap.api.v1.GetLabelIndicesInfoResponse_LabelIndexInfo_LabelIndexType", GetLabelIndicesInfoResponse_LabelIndexInfo_LabelIndexType_name, GetLabelIndicesInfoResponse_LabelIndexInfo_LabelIndexType_value)
	proto.RegisterType((*OpenEventRequest)(nil), "mtap.api.v1.OpenEventRequest")
	proto.RegisterType((*OpenEventResponse)(nil), "mtap.api.v1.OpenEventResponse")
	proto.RegisterType((*CloseEventRequest)(nil), "mtap.api.v1.CloseEventRequest")
	proto.RegisterType((*CloseEventResponse)(nil), "mtap.api.v1.CloseEventResponse")
	proto.RegisterType((*GetAllMetadataRequest)(nil), "mtap.api.v1.GetAllMetadataRequest")
	proto.RegisterType((*GetAllMetadataResponse)(nil), "mtap.api.v1.GetAllMetadataResponse")
	proto.RegisterMapType((map[string]string)(nil), "mtap.api.v1.GetAllMetadataResponse.MetadataEntry")
	proto.RegisterType((*AddMetadataRequest)(nil), "mtap.api.v1.AddMetadataRequest")
	proto.RegisterType((*AddMetadataResponse)(nil), "mtap.api.v1.AddMetadataResponse")
	proto.RegisterType((*GetAllBinaryDataNamesRequest)(nil), "mtap.api.v1.GetAllBinaryDataNamesRequest")
	proto.RegisterType((*GetAllBinaryDataNamesResponse)(nil), "mtap.api.v1.GetAllBinaryDataNamesResponse")
	proto.RegisterType((*AddBinaryDataRequest)(nil), "mtap.api.v1.AddBinaryDataRequest")
	proto.RegisterType((*AddBinaryDataResponse)(nil), "mtap.api.v1.AddBinaryDataResponse")
	proto.RegisterType((*GetBinaryDataRequest)(nil), "mtap.api.v1.GetBinaryDataRequest")
	proto.RegisterType((*GetBinaryDataResponse)(nil), "mtap.api.v1.GetBinaryDataResponse")
	proto.RegisterType((*AddDocumentRequest)(nil), "mtap.api.v1.AddDocumentRequest")
	proto.RegisterType((*AddDocumentResponse)(nil), "mtap.api.v1.AddDocumentResponse")
	proto.RegisterType((*GetAllDocumentNamesRequest)(nil), "mtap.api.v1.GetAllDocumentNamesRequest")
	proto.RegisterType((*GetAllDocumentNamesResponse)(nil), "mtap.api.v1.GetAllDocumentNamesResponse")
	proto.RegisterType((*GetDocumentTextRequest)(nil), "mtap.api.v1.GetDocumentTextRequest")
	proto.RegisterType((*GetDocumentTextResponse)(nil), "mtap.api.v1.GetDocumentTextResponse")
	proto.RegisterType((*GetLabelIndicesInfoRequest)(nil), "mtap.api.v1.GetLabelIndicesInfoRequest")
	proto.RegisterType((*GetLabelIndicesInfoResponse)(nil), "mtap.api.v1.GetLabelIndicesInfoResponse")
	proto.RegisterType((*GetLabelIndicesInfoResponse_LabelIndexInfo)(nil), "mtap.api.v1.GetLabelIndicesInfoResponse.LabelIndexInfo")
	proto.RegisterType((*AddLabelsRequest)(nil), "mtap.api.v1.AddLabelsRequest")
	proto.RegisterType((*AddLabelsResponse)(nil), "mtap.api.v1.AddLabelsResponse")
	proto.RegisterType((*GetLabelsRequest)(nil), "mtap.api.v1.GetLabelsRequest")
	proto.RegisterType((*GenericLabels)(nil), "mtap.api.v1.GenericLabels")
	proto.RegisterType((*GenericLabel)(nil), "mtap.api.v1.GenericLabel")
	proto.RegisterType((*GetLabelsResponse)(nil), "mtap.api.v1.GetLabelsResponse")
}

func init() { proto.RegisterFile("mtap/api/v1/events.proto", fileDescriptor_df12139ef613a759) }

var fileDescriptor_df12139ef613a759 = []byte{
	// 1430 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x97, 0x4d, 0x6f, 0xdb, 0x46,
	0x13, 0xc7, 0x43, 0x39, 0xb1, 0xad, 0xb1, 0x29, 0xcb, 0x1b, 0xfb, 0xb1, 0xcc, 0xc4, 0x8e, 0xb2,
	0xc9, 0x93, 0x38, 0x06, 0x4a, 0xc2, 0x4e, 0x91, 0xa4, 0x49, 0x50, 0xd4, 0xb1, 0xdd, 0x58, 0x70,
	0xa3, 0x00, 0x4c, 0xd2, 0x14, 0x6d, 0x01, 0x81, 0x16, 0xd7, 0x2e, 0x11, 0x7a, 0xa9, 0x88, 0x94,
	0x63, 0xc1, 0xed, 0xa1, 0x3d, 0xf7, 0x52, 0xf4, 0x25, 0x40, 0x2f, 0xbd, 0xf4, 0xd0, 0x7e, 0x8e,
	0x5e, 0x7a, 0xe9, 0xa9, 0xc7, 0x5e, 0xfb, 0x41, 0x0a, 0x0e, 0x77, 0x2d, 0xbe, 0x49, 0x51, 0x02,
	0xb7, 0x37, 0xed, 0xce, 0xec, 0xcc, 0x6f, 0xff, 0x1a, 0xee, 0xce, 0x42, 0x65, 0x3f, 0xb0, 0x5a,
	0x86, 0xd5, 0x72, 0x8c, 0x83, 0x15, 0x83, 0x1d, 0x30, 0x1e, 0xf8, 0x7a, 0xab, 0xed, 0x05, 0x1e,
	0x99, 0x08, 0x2d, 0xba, 0xd5, 0x72, 0xf4, 0x83, 0x15, 0xed, 0xfc, 0x9e, 0xe7, 0xed, 0xb9, 0x0c,
	0x1d, 0x2d, 0xce, 0xbd, 0xc0, 0x0a, 0x1c, 0x8f, 0x0b, 0x57, 0x6d, 0x5e, 0x58, 0x71, 0xb4, 0xd3,
	0xd9, 0x35, 0x2c, 0xde, 0x15, 0xa6, 0xc5, 0xb4, 0xc9, 0xee, 0xb4, 0x71, 0xad, 0xb0, 0x9f, 0x4f,
	0xdb, 0xfd, 0xa0, 0xdd, 0x69, 0x06, 0x91, 0x95, 0xbe, 0x54, 0xa0, 0xfc, 0xb0, 0xc5, 0xf8, 0x66,
	0x08, 0x66, 0xb2, 0xe7, 0x1d, 0xe6, 0x07, 0x64, 0x1e, 0xc6, 0x11, 0xb4, 0xe1, 0xd8, 0x15, 0xa5,
	0xaa, 0x2c, 0x15, 0xcd, 0x31, 0x1c, 0xd7, 0x6c, 0x72, 0x05, 0xa6, 0x3c, 0xee, 0x76, 0x1b, 0xcd,
	0x36, 0xb3, 0x02, 0xd6, 0xe0, 0xec, 0x45, 0xa5, 0x50, 0x55, 0x96, 0xc6, 0x4d, 0x35, 0x9c, 0x5e,
	0xc7, 0xd9, 0x3a, 0x7b, 0x41, 0xde, 0x83, 0x92, 0xcb, 0x2c, 0x9f, 0x35, 0x24, 0x4d, 0x65, 0xa4,
	0xaa, 0x2c, 0x4d, 0xac, 0xce, 0xeb, 0x11, 0x8e, 0x2e, 0x71, 0xf4, 0x0d, 0xe1, 0x60, 0xaa, 0xb8,
	0x40, 0x0e, 0xe9, 0x16, 0x4c, 0xc7, 0xc0, 0xfc, 0x96, 0xc7, 0x7d, 0x46, 0x2a, 0x30, 0x16, 0x65,
	0x8e, 0xc0, 0xc6, 0x4d, 0x39, 0x0c, 0x99, 0xa3, 0x84, 0x8e, 0x8d, 0x44, 0x67, 0xcc, 0x31, 0x1c,
	0xd7, 0x6c, 0x5a, 0x83, 0xe9, 0x75, 0xd7, 0xf3, 0xd9, 0xb0, 0x7b, 0x1c, 0x10, 0x4a, 0x07, 0x12,
	0x0f, 0xd5, 0xa3, 0xb2, 0x99, 0xcb, 0x62, 0x54, 0x62, 0x48, 0x57, 0x61, 0xf6, 0x3e, 0x0b, 0xd6,
	0x5c, 0xf7, 0x01, 0x0b, 0x2c, 0xdb, 0x0a, 0xac, 0x57, 0xa7, 0xa7, 0x3f, 0x2b, 0xf0, 0xbf, 0xf4,
	0x22, 0x91, 0xe8, 0x01, 0x8c, 0xef, 0x8b, 0xb9, 0x8a, 0x52, 0x1d, 0x59, 0x9a, 0x58, 0x5d, 0xd1,
	0x63, 0x45, 0xa4, 0xe7, 0x2f, 0xd3, 0xe5, 0xc4, 0x26, 0x0f, 0xda, 0x5d, 0xf3, 0x38, 0x84, 0x76,
	0x07, 0xd4, 0x84, 0x89, 0x94, 0x61, 0xe4, 0x19, 0xeb, 0x0a, 0xa0, 0xf0, 0x27, 0x99, 0x81, 0x33,
	0x07, 0x96, 0xdb, 0x61, 0x28, 0x44, 0xd1, 0x8c, 0x06, 0xb7, 0x0b, 0xb7, 0x14, 0xfa, 0x14, 0xc8,
	0x9a, 0x6d, 0x0f, 0xbf, 0x2f, 0x19, 0xbc, 0x90, 0x13, 0x7c, 0x24, 0x16, 0x9c, 0xce, 0xc2, 0xd9,
	0x44, 0xe0, 0x68, 0x13, 0xf4, 0x1d, 0x38, 0x1f, 0x6d, 0xef, 0x9e, 0xc3, 0xad, 0x76, 0x77, 0xc3,
	0x0a, 0xac, 0xba, 0xb5, 0xcf, 0xfc, 0x21, 0x14, 0xdd, 0x86, 0x85, 0x3e, 0x4b, 0x85, 0xae, 0xcb,
	0x30, 0xbd, 0x83, 0xa6, 0x46, 0x98, 0xb2, 0xc1, 0x43, 0x23, 0x0a, 0x5c, 0x34, 0xa7, 0x76, 0x92,
	0x6b, 0xe8, 0xe7, 0x30, 0xb3, 0x66, 0xdb, 0xbd, 0x48, 0x43, 0xec, 0x7c, 0x09, 0xca, 0xe9, 0xf0,
	0x42, 0x86, 0x52, 0x32, 0x3a, 0xb9, 0x00, 0x13, 0x31, 0x4f, 0xd4, 0x65, 0xd2, 0x84, 0x9e, 0x13,
	0x9d, 0x83, 0xd9, 0x54, 0x76, 0x21, 0xcf, 0x27, 0x30, 0x73, 0x9f, 0x05, 0xff, 0x0e, 0x16, 0xbd,
	0x85, 0x65, 0x9c, 0xcd, 0x9a, 0xe6, 0x55, 0x32, 0xbc, 0x9f, 0x61, 0x95, 0x6c, 0x78, 0xcd, 0xce,
	0xfe, 0x70, 0x1f, 0xdf, 0x25, 0x50, 0x6d, 0xe1, 0x1d, 0x27, 0x9a, 0x94, 0x93, 0x28, 0x13, 0x81,
	0xd3, 0x01, 0x3b, 0x0c, 0x44, 0xdd, 0xe0, 0x6f, 0x51, 0x36, 0xbd, 0x4c, 0x42, 0x97, 0x9b, 0xa0,
	0x45, 0xff, 0xfd, 0x46, 0x2c, 0xc0, 0x30, 0x45, 0xb3, 0x01, 0xe7, 0x72, 0x17, 0x8a, 0x9d, 0xff,
	0x1f, 0x4a, 0x09, 0x4e, 0x59, 0x2f, 0x6a, 0x1c, 0xd4, 0xa7, 0x1f, 0xe1, 0xb7, 0x2c, 0x43, 0x3c,
	0x66, 0x87, 0x27, 0xa5, 0x01, 0x7d, 0x0b, 0xe6, 0x32, 0x91, 0x05, 0x9b, 0x94, 0x47, 0x89, 0xc9,
	0xf3, 0x29, 0xea, 0xf0, 0x81, 0xb5, 0xc3, 0xdc, 0x1a, 0xb7, 0x9d, 0x26, 0xf3, 0x6b, 0x7c, 0xd7,
	0x3b, 0x29, 0x98, 0xdf, 0x0b, 0xa8, 0x56, 0x36, 0xbc, 0x20, 0x6a, 0xc2, 0xb4, 0x1b, 0xda, 0x1a,
	0x0e, 0xb7, 0xd9, 0x61, 0xc3, 0xe1, 0xbb, 0x9e, 0x2f, 0x4e, 0xb0, 0x9b, 0xe9, 0x13, 0xac, 0x5f,
	0x10, 0x5d, 0x1a, 0xd8, 0x21, 0x4e, 0x4f, 0xb9, 0x89, 0xb1, 0xaf, 0xfd, 0xa6, 0x40, 0x29, 0xe9,
	0x43, 0x16, 0x00, 0xa2, 0x8c, 0x48, 0x1e, 0xed, 0xac, 0x88, 0x33, 0x58, 0x47, 0x1f, 0xc3, 0xe9,
	0xa0, 0xdb, 0x8a, 0xb6, 0x54, 0x5a, 0x7d, 0xff, 0x0d, 0x49, 0x62, 0xc3, 0xc7, 0xdd, 0x16, 0x33,
	0x31, 0x26, 0xbd, 0x11, 0x87, 0x09, 0xe7, 0xc9, 0x04, 0x8c, 0x3d, 0xa9, 0x6f, 0xd7, 0x1f, 0x3e,
	0xad, 0x97, 0x4f, 0x85, 0x83, 0xfb, 0x9b, 0xf5, 0x4d, 0xb3, 0xb6, 0x5e, 0x56, 0x08, 0xc0, 0xe8,
	0xfa, 0x93, 0x47, 0x8f, 0x1f, 0x3e, 0x28, 0x17, 0xe8, 0xaf, 0x05, 0x28, 0xaf, 0xd9, 0x36, 0xae,
	0xf5, 0x4f, 0xea, 0x83, 0x49, 0xea, 0x30, 0x92, 0xd6, 0x61, 0x1d, 0x4a, 0x7b, 0x8c, 0xb3, 0xb6,
	0xd3, 0x6c, 0xa0, 0xa8, 0x7e, 0xe5, 0x34, 0xde, 0xd6, 0x5a, 0x4a, 0x11, 0x74, 0x89, 0xc8, 0xb6,
	0x4e, 0x99, 0xea, 0x5e, 0x7c, 0x82, 0xdc, 0x01, 0xb5, 0xd9, 0xf1, 0x03, 0x6f, 0x5f, 0xc6, 0x38,
	0x83, 0x31, 0x66, 0x32, 0x37, 0xfe, 0x1a, 0xef, 0x6e, 0x9d, 0x32, 0x27, 0x23, 0x67, 0xb1, 0x78,
	0x19, 0xa6, 0xb9, 0xd7, 0x78, 0xc6, 0xba, 0x8d, 0x03, 0xcb, 0x75, 0xec, 0xa8, 0x65, 0x18, 0xc5,
	0xcb, 0x74, 0x8a, 0x7b, 0xdb, 0xac, 0xfb, 0xe1, 0xf1, 0xf4, 0xbd, 0x71, 0x18, 0x8d, 0x32, 0xd0,
	0xb3, 0x30, 0x1d, 0x93, 0x4a, 0x7c, 0xf1, 0xcf, 0xa1, 0x2c, 0xff, 0xbb, 0xff, 0x48, 0x3f, 0xda,
	0x04, 0x35, 0x21, 0x4e, 0x78, 0x2e, 0x3a, 0x7e, 0xc3, 0x76, 0xfc, 0xc0, 0xe1, 0xcd, 0x40, 0x74,
	0x05, 0xe0, 0xf8, 0x1b, 0x62, 0x86, 0xac, 0xc8, 0x3d, 0x54, 0x0a, 0xf8, 0x15, 0xcc, 0xf7, 0x55,
	0xda, 0x94, 0x9b, 0xfd, 0x4b, 0x81, 0xc9, 0xb8, 0x81, 0x2c, 0x02, 0x38, 0x36, 0xe3, 0x81, 0xb3,
	0xeb, 0xb0, 0x36, 0xe6, 0x50, 0xcd, 0xd8, 0x4c, 0x08, 0xe1, 0x07, 0x56, 0x3b, 0x88, 0x3e, 0x3a,
	0xdc, 0x97, 0x6a, 0x02, 0x4e, 0x61, 0x51, 0x92, 0x73, 0x50, 0x64, 0xdc, 0x16, 0xe6, 0x11, 0x34,
	0x8f, 0x33, 0x6e, 0x47, 0x46, 0x03, 0x46, 0x77, 0x1d, 0xe6, 0xda, 0xb2, 0x16, 0xe6, 0x32, 0xff,
	0xe3, 0x23, 0x6c, 0x24, 0x4d, 0xe1, 0x46, 0xee, 0x82, 0xda, 0x66, 0xbb, 0xac, 0xcd, 0x78, 0x33,
	0x6c, 0x9d, 0xe4, 0xff, 0xdf, 0x77, 0xdd, 0xe4, 0xb1, 0x77, 0xcd, 0xf6, 0xe9, 0x4f, 0x0a, 0x4c,
	0xc7, 0xfe, 0x36, 0x71, 0x6e, 0x64, 0x0b, 0x53, 0x39, 0x81, 0xc2, 0x2c, 0x0c, 0x5f, 0x98, 0xbd,
	0x62, 0x5b, 0xfd, 0xa3, 0x04, 0xa3, 0xd8, 0xf7, 0xf9, 0xc4, 0x85, 0xe2, 0x71, 0x6f, 0x4a, 0x16,
	0x12, 0x2c, 0xe9, 0x66, 0x5a, 0x5b, 0xec, 0x67, 0x16, 0xe5, 0x5a, 0xfd, 0xea, 0xcf, 0xbf, 0xbf,
	0x2d, 0x68, 0x74, 0xb6, 0xf7, 0x3e, 0x30, 0x8e, 0x64, 0xb1, 0x7e, 0x71, 0x5b, 0x59, 0x26, 0x2e,
	0x40, 0xaf, 0xe9, 0x24, 0xc9, 0x78, 0x99, 0xc6, 0x56, 0xbb, 0xd0, 0xd7, 0x2e, 0x12, 0x2e, 0x60,
	0xc2, 0xb9, 0xe5, 0xfc, 0x84, 0xe4, 0x4b, 0x05, 0x4a, 0xc9, 0x3e, 0x92, 0xd0, 0x81, 0x4d, 0x66,
	0x94, 0xf6, 0xd2, 0x10, 0x8d, 0x28, 0xbd, 0x82, 0xa9, 0xab, 0x64, 0x31, 0x37, 0xb5, 0x21, 0x1b,
	0xd3, 0x90, 0x61, 0x22, 0xd6, 0x03, 0x92, 0xe4, 0x9e, 0xb2, 0x6d, 0xa7, 0x56, 0xed, 0xef, 0x20,
	0x52, 0x1b, 0x98, 0xfa, 0x1a, 0xbd, 0x3c, 0x38, 0xb5, 0x71, 0xf4, 0x8c, 0x75, 0x51, 0xf5, 0xaf,
	0x23, 0x06, 0x79, 0xc1, 0x66, 0x19, 0x52, 0x4d, 0x4d, 0x96, 0x21, 0xd3, 0x8b, 0xdc, 0x46, 0x86,
	0xb7, 0xa9, 0x91, 0xcf, 0x20, 0x4f, 0x1c, 0xdf, 0x38, 0x4a, 0x9c, 0x48, 0x88, 0xf3, 0x8d, 0x02,
	0x67, 0x73, 0xfa, 0x11, 0x72, 0x35, 0x47, 0xf7, 0xbc, 0x56, 0x47, 0x5b, 0x7a, 0xb5, 0xa3, 0xc0,
	0xbc, 0x8a, 0x98, 0x17, 0xc9, 0x85, 0x57, 0x60, 0x92, 0xef, 0x15, 0x98, 0x4a, 0xf5, 0x20, 0x24,
	0x53, 0x07, 0x39, 0xbd, 0x8f, 0x76, 0x79, 0xb0, 0x93, 0x6c, 0xdd, 0x90, 0x63, 0x85, 0xbc, 0xae,
	0x5c, 0xe4, 0x97, 0x48, 0xab, 0xf4, 0xf5, 0x9d, 0xd5, 0xaa, 0x4f, 0x3b, 0x94, 0xd5, 0xaa, 0x5f,
	0x27, 0x40, 0xdf, 0x45, 0xc6, 0x5b, 0xe4, 0xc6, 0x6b, 0x32, 0x1a, 0xd1, 0xa1, 0x42, 0x7e, 0x54,
	0xa0, 0x78, 0x7c, 0x85, 0xa5, 0x8e, 0x92, 0x74, 0x17, 0x90, 0x3a, 0x4a, 0xb2, 0x37, 0x5f, 0x1d,
	0x61, 0xb6, 0xe8, 0xfa, 0x9b, 0xc1, 0x18, 0x47, 0xbd, 0x3b, 0x0e, 0x6b, 0xee, 0xa5, 0x02, 0xc5,
	0xe3, 0x33, 0x39, 0x05, 0x97, 0xbe, 0x62, 0x53, 0x70, 0x99, 0xa3, 0x9c, 0x6e, 0x23, 0xdc, 0x26,
	0x39, 0x09, 0x38, 0xf2, 0x83, 0x22, 0x1f, 0xd6, 0xa9, 0x27, 0x1d, 0xb9, 0x96, 0x53, 0xe6, 0xf9,
	0x2f, 0x46, 0x6d, 0x79, 0x18, 0xd7, 0xe1, 0x4e, 0x2e, 0x7c, 0xf1, 0x38, 0xcc, 0x27, 0xdf, 0x29,
	0xa0, 0x26, 0x1e, 0x68, 0xe4, 0x62, 0xfa, 0x4f, 0xcb, 0xbc, 0xd1, 0x34, 0x3a, 0xc8, 0x45, 0x00,
	0xdc, 0x45, 0x80, 0x1b, 0x74, 0x65, 0x30, 0x80, 0x71, 0x94, 0x7e, 0xd2, 0xc9, 0xd3, 0x43, 0x4d,
	0xbc, 0xe0, 0x52, 0x58, 0x79, 0x4f, 0x47, 0x8d, 0x0e, 0x72, 0x91, 0xaf, 0x72, 0xc4, 0xba, 0x4e,
	0x5e, 0x1f, 0xeb, 0xde, 0x39, 0x98, 0x67, 0x76, 0x47, 0xef, 0xec, 0x73, 0x9d, 0xbb, 0x2d, 0x87,
	0xc5, 0xb3, 0xed, 0x8c, 0xe2, 0xa5, 0x7c, 0xfd, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf9, 0xd7,
	0x48, 0x54, 0x3e, 0x13, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EventsClient is the client API for Events service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventsClient interface {
	// Acquires a lease for an event, which will prevent this service
	// from deleting the event while the lease is still valid. Can be used to
	// either create new events or return existing events.
	OpenEvent(ctx context.Context, in *OpenEventRequest, opts ...grpc.CallOption) (*OpenEventResponse, error)
	// Cedes a lease for an event, allowing this service to delete the
	// event if no active leases remain.
	CloseEvent(ctx context.Context, in *CloseEventRequest, opts ...grpc.CallOption) (*CloseEventResponse, error)
	// Endpoint to get all metadata associated with an event.
	GetAllMetadata(ctx context.Context, in *GetAllMetadataRequest, opts ...grpc.CallOption) (*GetAllMetadataResponse, error)
	// Adds a new metadata entry to an event.
	AddMetadata(ctx context.Context, in *AddMetadataRequest, opts ...grpc.CallOption) (*AddMetadataResponse, error)
	// Adds a new document to an event.
	AddDocument(ctx context.Context, in *AddDocumentRequest, opts ...grpc.CallOption) (*AddDocumentResponse, error)
	// Returns the names keys of all documents that are stored on an event.
	GetAllDocumentNames(ctx context.Context, in *GetAllDocumentNamesRequest, opts ...grpc.CallOption) (*GetAllDocumentNamesResponse, error)
	// Returns the text of a document.
	GetDocumentText(ctx context.Context, in *GetDocumentTextRequest, opts ...grpc.CallOption) (*GetDocumentTextResponse, error)
	// Returns the names keys of all label indices that are stored on a document.
	GetLabelIndicesInfo(ctx context.Context, in *GetLabelIndicesInfoRequest, opts ...grpc.CallOption) (*GetLabelIndicesInfoResponse, error)
	// Adds a single label index to the document.
	AddLabels(ctx context.Context, in *AddLabelsRequest, opts ...grpc.CallOption) (*AddLabelsResponse, error)
	// Gets all of the labels for a single label index.
	GetLabels(ctx context.Context, in *GetLabelsRequest, opts ...grpc.CallOption) (*GetLabelsResponse, error)
	GetAllBinaryDataNames(ctx context.Context, in *GetAllBinaryDataNamesRequest, opts ...grpc.CallOption) (*GetAllBinaryDataNamesResponse, error)
	AddBinaryData(ctx context.Context, in *AddBinaryDataRequest, opts ...grpc.CallOption) (*AddBinaryDataResponse, error)
	GetBinaryData(ctx context.Context, in *GetBinaryDataRequest, opts ...grpc.CallOption) (*GetBinaryDataResponse, error)
}

type eventsClient struct {
	cc grpc.ClientConnInterface
}

func NewEventsClient(cc grpc.ClientConnInterface) EventsClient {
	return &eventsClient{cc}
}

func (c *eventsClient) OpenEvent(ctx context.Context, in *OpenEventRequest, opts ...grpc.CallOption) (*OpenEventResponse, error) {
	out := new(OpenEventResponse)
	err := c.cc.Invoke(ctx, "/mtap.api.v1.Events/OpenEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) CloseEvent(ctx context.Context, in *CloseEventRequest, opts ...grpc.CallOption) (*CloseEventResponse, error) {
	out := new(CloseEventResponse)
	err := c.cc.Invoke(ctx, "/mtap.api.v1.Events/CloseEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) GetAllMetadata(ctx context.Context, in *GetAllMetadataRequest, opts ...grpc.CallOption) (*GetAllMetadataResponse, error) {
	out := new(GetAllMetadataResponse)
	err := c.cc.Invoke(ctx, "/mtap.api.v1.Events/GetAllMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) AddMetadata(ctx context.Context, in *AddMetadataRequest, opts ...grpc.CallOption) (*AddMetadataResponse, error) {
	out := new(AddMetadataResponse)
	err := c.cc.Invoke(ctx, "/mtap.api.v1.Events/AddMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) AddDocument(ctx context.Context, in *AddDocumentRequest, opts ...grpc.CallOption) (*AddDocumentResponse, error) {
	out := new(AddDocumentResponse)
	err := c.cc.Invoke(ctx, "/mtap.api.v1.Events/AddDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) GetAllDocumentNames(ctx context.Context, in *GetAllDocumentNamesRequest, opts ...grpc.CallOption) (*GetAllDocumentNamesResponse, error) {
	out := new(GetAllDocumentNamesResponse)
	err := c.cc.Invoke(ctx, "/mtap.api.v1.Events/GetAllDocumentNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) GetDocumentText(ctx context.Context, in *GetDocumentTextRequest, opts ...grpc.CallOption) (*GetDocumentTextResponse, error) {
	out := new(GetDocumentTextResponse)
	err := c.cc.Invoke(ctx, "/mtap.api.v1.Events/GetDocumentText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) GetLabelIndicesInfo(ctx context.Context, in *GetLabelIndicesInfoRequest, opts ...grpc.CallOption) (*GetLabelIndicesInfoResponse, error) {
	out := new(GetLabelIndicesInfoResponse)
	err := c.cc.Invoke(ctx, "/mtap.api.v1.Events/GetLabelIndicesInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) AddLabels(ctx context.Context, in *AddLabelsRequest, opts ...grpc.CallOption) (*AddLabelsResponse, error) {
	out := new(AddLabelsResponse)
	err := c.cc.Invoke(ctx, "/mtap.api.v1.Events/AddLabels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) GetLabels(ctx context.Context, in *GetLabelsRequest, opts ...grpc.CallOption) (*GetLabelsResponse, error) {
	out := new(GetLabelsResponse)
	err := c.cc.Invoke(ctx, "/mtap.api.v1.Events/GetLabels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) GetAllBinaryDataNames(ctx context.Context, in *GetAllBinaryDataNamesRequest, opts ...grpc.CallOption) (*GetAllBinaryDataNamesResponse, error) {
	out := new(GetAllBinaryDataNamesResponse)
	err := c.cc.Invoke(ctx, "/mtap.api.v1.Events/GetAllBinaryDataNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) AddBinaryData(ctx context.Context, in *AddBinaryDataRequest, opts ...grpc.CallOption) (*AddBinaryDataResponse, error) {
	out := new(AddBinaryDataResponse)
	err := c.cc.Invoke(ctx, "/mtap.api.v1.Events/AddBinaryData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) GetBinaryData(ctx context.Context, in *GetBinaryDataRequest, opts ...grpc.CallOption) (*GetBinaryDataResponse, error) {
	out := new(GetBinaryDataResponse)
	err := c.cc.Invoke(ctx, "/mtap.api.v1.Events/GetBinaryData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventsServer is the server API for Events service.
type EventsServer interface {
	// Acquires a lease for an event, which will prevent this service
	// from deleting the event while the lease is still valid. Can be used to
	// either create new events or return existing events.
	OpenEvent(context.Context, *OpenEventRequest) (*OpenEventResponse, error)
	// Cedes a lease for an event, allowing this service to delete the
	// event if no active leases remain.
	CloseEvent(context.Context, *CloseEventRequest) (*CloseEventResponse, error)
	// Endpoint to get all metadata associated with an event.
	GetAllMetadata(context.Context, *GetAllMetadataRequest) (*GetAllMetadataResponse, error)
	// Adds a new metadata entry to an event.
	AddMetadata(context.Context, *AddMetadataRequest) (*AddMetadataResponse, error)
	// Adds a new document to an event.
	AddDocument(context.Context, *AddDocumentRequest) (*AddDocumentResponse, error)
	// Returns the names keys of all documents that are stored on an event.
	GetAllDocumentNames(context.Context, *GetAllDocumentNamesRequest) (*GetAllDocumentNamesResponse, error)
	// Returns the text of a document.
	GetDocumentText(context.Context, *GetDocumentTextRequest) (*GetDocumentTextResponse, error)
	// Returns the names keys of all label indices that are stored on a document.
	GetLabelIndicesInfo(context.Context, *GetLabelIndicesInfoRequest) (*GetLabelIndicesInfoResponse, error)
	// Adds a single label index to the document.
	AddLabels(context.Context, *AddLabelsRequest) (*AddLabelsResponse, error)
	// Gets all of the labels for a single label index.
	GetLabels(context.Context, *GetLabelsRequest) (*GetLabelsResponse, error)
	GetAllBinaryDataNames(context.Context, *GetAllBinaryDataNamesRequest) (*GetAllBinaryDataNamesResponse, error)
	AddBinaryData(context.Context, *AddBinaryDataRequest) (*AddBinaryDataResponse, error)
	GetBinaryData(context.Context, *GetBinaryDataRequest) (*GetBinaryDataResponse, error)
}

// UnimplementedEventsServer can be embedded to have forward compatible implementations.
type UnimplementedEventsServer struct {
}

func (*UnimplementedEventsServer) OpenEvent(ctx context.Context, req *OpenEventRequest) (*OpenEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenEvent not implemented")
}
func (*UnimplementedEventsServer) CloseEvent(ctx context.Context, req *CloseEventRequest) (*CloseEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseEvent not implemented")
}
func (*UnimplementedEventsServer) GetAllMetadata(ctx context.Context, req *GetAllMetadataRequest) (*GetAllMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMetadata not implemented")
}
func (*UnimplementedEventsServer) AddMetadata(ctx context.Context, req *AddMetadataRequest) (*AddMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMetadata not implemented")
}
func (*UnimplementedEventsServer) AddDocument(ctx context.Context, req *AddDocumentRequest) (*AddDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDocument not implemented")
}
func (*UnimplementedEventsServer) GetAllDocumentNames(ctx context.Context, req *GetAllDocumentNamesRequest) (*GetAllDocumentNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDocumentNames not implemented")
}
func (*UnimplementedEventsServer) GetDocumentText(ctx context.Context, req *GetDocumentTextRequest) (*GetDocumentTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentText not implemented")
}
func (*UnimplementedEventsServer) GetLabelIndicesInfo(ctx context.Context, req *GetLabelIndicesInfoRequest) (*GetLabelIndicesInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabelIndicesInfo not implemented")
}
func (*UnimplementedEventsServer) AddLabels(ctx context.Context, req *AddLabelsRequest) (*AddLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLabels not implemented")
}
func (*UnimplementedEventsServer) GetLabels(ctx context.Context, req *GetLabelsRequest) (*GetLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabels not implemented")
}
func (*UnimplementedEventsServer) GetAllBinaryDataNames(ctx context.Context, req *GetAllBinaryDataNamesRequest) (*GetAllBinaryDataNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBinaryDataNames not implemented")
}
func (*UnimplementedEventsServer) AddBinaryData(ctx context.Context, req *AddBinaryDataRequest) (*AddBinaryDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBinaryData not implemented")
}
func (*UnimplementedEventsServer) GetBinaryData(ctx context.Context, req *GetBinaryDataRequest) (*GetBinaryDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBinaryData not implemented")
}

func RegisterEventsServer(s *grpc.Server, srv EventsServer) {
	s.RegisterService(&_Events_serviceDesc, srv)
}

func _Events_OpenEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).OpenEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtap.api.v1.Events/OpenEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).OpenEvent(ctx, req.(*OpenEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_CloseEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).CloseEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtap.api.v1.Events/CloseEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).CloseEvent(ctx, req.(*CloseEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_GetAllMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).GetAllMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtap.api.v1.Events/GetAllMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).GetAllMetadata(ctx, req.(*GetAllMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_AddMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).AddMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtap.api.v1.Events/AddMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).AddMetadata(ctx, req.(*AddMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_AddDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).AddDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtap.api.v1.Events/AddDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).AddDocument(ctx, req.(*AddDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_GetAllDocumentNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllDocumentNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).GetAllDocumentNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtap.api.v1.Events/GetAllDocumentNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).GetAllDocumentNames(ctx, req.(*GetAllDocumentNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_GetDocumentText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).GetDocumentText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtap.api.v1.Events/GetDocumentText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).GetDocumentText(ctx, req.(*GetDocumentTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_GetLabelIndicesInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLabelIndicesInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).GetLabelIndicesInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtap.api.v1.Events/GetLabelIndicesInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).GetLabelIndicesInfo(ctx, req.(*GetLabelIndicesInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_AddLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).AddLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtap.api.v1.Events/AddLabels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).AddLabels(ctx, req.(*AddLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_GetLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).GetLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtap.api.v1.Events/GetLabels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).GetLabels(ctx, req.(*GetLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_GetAllBinaryDataNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllBinaryDataNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).GetAllBinaryDataNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtap.api.v1.Events/GetAllBinaryDataNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).GetAllBinaryDataNames(ctx, req.(*GetAllBinaryDataNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_AddBinaryData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBinaryDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).AddBinaryData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtap.api.v1.Events/AddBinaryData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).AddBinaryData(ctx, req.(*AddBinaryDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_GetBinaryData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBinaryDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).GetBinaryData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtap.api.v1.Events/GetBinaryData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).GetBinaryData(ctx, req.(*GetBinaryDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Events_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtap.api.v1.Events",
	HandlerType: (*EventsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpenEvent",
			Handler:    _Events_OpenEvent_Handler,
		},
		{
			MethodName: "CloseEvent",
			Handler:    _Events_CloseEvent_Handler,
		},
		{
			MethodName: "GetAllMetadata",
			Handler:    _Events_GetAllMetadata_Handler,
		},
		{
			MethodName: "AddMetadata",
			Handler:    _Events_AddMetadata_Handler,
		},
		{
			MethodName: "AddDocument",
			Handler:    _Events_AddDocument_Handler,
		},
		{
			MethodName: "GetAllDocumentNames",
			Handler:    _Events_GetAllDocumentNames_Handler,
		},
		{
			MethodName: "GetDocumentText",
			Handler:    _Events_GetDocumentText_Handler,
		},
		{
			MethodName: "GetLabelIndicesInfo",
			Handler:    _Events_GetLabelIndicesInfo_Handler,
		},
		{
			MethodName: "AddLabels",
			Handler:    _Events_AddLabels_Handler,
		},
		{
			MethodName: "GetLabels",
			Handler:    _Events_GetLabels_Handler,
		},
		{
			MethodName: "GetAllBinaryDataNames",
			Handler:    _Events_GetAllBinaryDataNames_Handler,
		},
		{
			MethodName: "AddBinaryData",
			Handler:    _Events_AddBinaryData_Handler,
		},
		{
			MethodName: "GetBinaryData",
			Handler:    _Events_GetBinaryData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mtap/api/v1/events.proto",
}
