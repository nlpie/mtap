// Copyright 2019 Regents of the University of Minnesota
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// The public API endpoints for the events service, which is responsible for managing data during
// pipeline processing.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: mtap/api/v1/events.proto

package v1

import (
	any1 "github.com/golang/protobuf/ptypes/any"
	duration "github.com/golang/protobuf/ptypes/duration"
	_struct "github.com/golang/protobuf/ptypes/struct"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetLabelIndicesInfoResponse_LabelIndexInfo_LabelIndexType int32

const (
	// Default, no labels field set or not known.
	GetLabelIndicesInfoResponse_LabelIndexInfo_UNKNOWN GetLabelIndicesInfoResponse_LabelIndexInfo_LabelIndexType = 0
	// Has the "generic_labels" field set.
	GetLabelIndicesInfoResponse_LabelIndexInfo_GENERIC GetLabelIndicesInfoResponse_LabelIndexInfo_LabelIndexType = 1
	// Has the "custom_labels" field set.
	GetLabelIndicesInfoResponse_LabelIndexInfo_CUSTOM GetLabelIndicesInfoResponse_LabelIndexInfo_LabelIndexType = 2
)

// Enum value maps for GetLabelIndicesInfoResponse_LabelIndexInfo_LabelIndexType.
var (
	GetLabelIndicesInfoResponse_LabelIndexInfo_LabelIndexType_name = map[int32]string{
		0: "UNKNOWN",
		1: "GENERIC",
		2: "CUSTOM",
	}
	GetLabelIndicesInfoResponse_LabelIndexInfo_LabelIndexType_value = map[string]int32{
		"UNKNOWN": 0,
		"GENERIC": 1,
		"CUSTOM":  2,
	}
)

func (x GetLabelIndicesInfoResponse_LabelIndexInfo_LabelIndexType) Enum() *GetLabelIndicesInfoResponse_LabelIndexInfo_LabelIndexType {
	p := new(GetLabelIndicesInfoResponse_LabelIndexInfo_LabelIndexType)
	*p = x
	return p
}

func (x GetLabelIndicesInfoResponse_LabelIndexInfo_LabelIndexType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetLabelIndicesInfoResponse_LabelIndexInfo_LabelIndexType) Descriptor() protoreflect.EnumDescriptor {
	return file_mtap_api_v1_events_proto_enumTypes[0].Descriptor()
}

func (GetLabelIndicesInfoResponse_LabelIndexInfo_LabelIndexType) Type() protoreflect.EnumType {
	return &file_mtap_api_v1_events_proto_enumTypes[0]
}

func (x GetLabelIndicesInfoResponse_LabelIndexInfo_LabelIndexType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetLabelIndicesInfoResponse_LabelIndexInfo_LabelIndexType.Descriptor instead.
func (GetLabelIndicesInfoResponse_LabelIndexInfo_LabelIndexType) EnumDescriptor() ([]byte, []int) {
	return file_mtap_api_v1_events_proto_rawDescGZIP(), []int{23, 0, 0}
}

// A request to retrieve the UUID for this events service instance.
type GetEventsInstanceIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetEventsInstanceIdRequest) Reset() {
	*x = GetEventsInstanceIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mtap_api_v1_events_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventsInstanceIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventsInstanceIdRequest) ProtoMessage() {}

func (x *GetEventsInstanceIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mtap_api_v1_events_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventsInstanceIdRequest.ProtoReflect.Descriptor instead.
func (*GetEventsInstanceIdRequest) Descriptor() ([]byte, []int) {
	return file_mtap_api_v1_events_proto_rawDescGZIP(), []int{0}
}

type GetEventsInstanceIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The instance identifier for the events instance.
	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *GetEventsInstanceIdResponse) Reset() {
	*x = GetEventsInstanceIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mtap_api_v1_events_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventsInstanceIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventsInstanceIdResponse) ProtoMessage() {}

func (x *GetEventsInstanceIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mtap_api_v1_events_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventsInstanceIdResponse.ProtoReflect.Descriptor instead.
func (*GetEventsInstanceIdResponse) Descriptor() ([]byte, []int) {
	return file_mtap_api_v1_events_proto_rawDescGZIP(), []int{1}
}

func (x *GetEventsInstanceIdResponse) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

// A request to open an event, retrieves a lease that prevents the service from
// de-allocating the event.
type OpenEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The globally unique event identifier.
	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// Only create a new event, failing if the event already exists.
	OnlyCreateNew bool `protobuf:"varint,2,opt,name=only_create_new,json=onlyCreateNew,proto3" json:"only_create_new,omitempty"`
	// Optional, how long the lease is valid for.
	LeaseDuration *duration.Duration `protobuf:"bytes,3,opt,name=lease_duration,json=leaseDuration,proto3" json:"lease_duration,omitempty"`
}

func (x *OpenEventRequest) Reset() {
	*x = OpenEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mtap_api_v1_events_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenEventRequest) ProtoMessage() {}

func (x *OpenEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mtap_api_v1_events_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenEventRequest.ProtoReflect.Descriptor instead.
func (*OpenEventRequest) Descriptor() ([]byte, []int) {
	return file_mtap_api_v1_events_proto_rawDescGZIP(), []int{2}
}

func (x *OpenEventRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *OpenEventRequest) GetOnlyCreateNew() bool {
	if x != nil {
		return x.OnlyCreateNew
	}
	return false
}

func (x *OpenEventRequest) GetLeaseDuration() *duration.Duration {
	if x != nil {
		return x.LeaseDuration
	}
	return nil
}

// The response from the service for the open event endpoint.
type OpenEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the service created a new event.
	Created bool `protobuf:"varint,1,opt,name=created,proto3" json:"created,omitempty"` //
	// Optional, if the lease has a duration, an identifier which can be used to
	// cede the lease, which will prevent the lease from being ceded twice.
	LeaseId int32 `protobuf:"varint,2,opt,name=lease_id,json=leaseId,proto3" json:"lease_id,omitempty"`
}

func (x *OpenEventResponse) Reset() {
	*x = OpenEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mtap_api_v1_events_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenEventResponse) ProtoMessage() {}

func (x *OpenEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mtap_api_v1_events_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenEventResponse.ProtoReflect.Descriptor instead.
func (*OpenEventResponse) Descriptor() ([]byte, []int) {
	return file_mtap_api_v1_events_proto_rawDescGZIP(), []int{3}
}

func (x *OpenEventResponse) GetCreated() bool {
	if x != nil {
		return x.Created
	}
	return false
}

func (x *OpenEventResponse) GetLeaseId() int32 {
	if x != nil {
		return x.LeaseId
	}
	return 0
}

// Cedes a lease to an event.
type CloseEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The event_id to release.
	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// Optional, if the lease has a timed expiration, this is required to prevent
	// releasing the lease twice.
	LeaseId int32 `protobuf:"varint,2,opt,name=lease_id,json=leaseId,proto3" json:"lease_id,omitempty"`
}

func (x *CloseEventRequest) Reset() {
	*x = CloseEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mtap_api_v1_events_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseEventRequest) ProtoMessage() {}

func (x *CloseEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mtap_api_v1_events_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseEventRequest.ProtoReflect.Descriptor instead.
func (*CloseEventRequest) Descriptor() ([]byte, []int) {
	return file_mtap_api_v1_events_proto_rawDescGZIP(), []int{4}
}

func (x *CloseEventRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *CloseEventRequest) GetLeaseId() int32 {
	if x != nil {
		return x.LeaseId
	}
	return 0
}

// Response from the service for closing events.
type CloseEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If the event was deleted after a close.
	Deleted bool `protobuf:"varint,1,opt,name=deleted,proto3" json:"deleted,omitempty"`
}

func (x *CloseEventResponse) Reset() {
	*x = CloseEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mtap_api_v1_events_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseEventResponse) ProtoMessage() {}

func (x *CloseEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mtap_api_v1_events_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseEventResponse.ProtoReflect.Descriptor instead.
func (*CloseEventResponse) Descriptor() ([]byte, []int) {
	return file_mtap_api_v1_events_proto_rawDescGZIP(), []int{5}
}

func (x *CloseEventResponse) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

// Request for all metadata associated with an event
type GetAllMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Event unique identifier string.
	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
}

func (x *GetAllMetadataRequest) Reset() {
	*x = GetAllMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mtap_api_v1_events_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllMetadataRequest) ProtoMessage() {}

func (x *GetAllMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mtap_api_v1_events_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllMetadataRequest.ProtoReflect.Descriptor instead.
func (*GetAllMetadataRequest) Descriptor() ([]byte, []int) {
	return file_mtap_api_v1_events_proto_rawDescGZIP(), []int{6}
}

func (x *GetAllMetadataRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

// Response from the server for all metadata associated with an event.
type GetAllMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The metadata map for the event
	Metadata map[string]string `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetAllMetadataResponse) Reset() {
	*x = GetAllMetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mtap_api_v1_events_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllMetadataResponse) ProtoMessage() {}

func (x *GetAllMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mtap_api_v1_events_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllMetadataResponse.ProtoReflect.Descriptor instead.
func (*GetAllMetadataResponse) Descriptor() ([]byte, []int) {
	return file_mtap_api_v1_events_proto_rawDescGZIP(), []int{7}
}

func (x *GetAllMetadataResponse) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Request to add a metadata entry to the events service
type AddMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique event identifier.
	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// The key for the metadata entry
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// The value for the metadata entry.
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AddMetadataRequest) Reset() {
	*x = AddMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mtap_api_v1_events_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMetadataRequest) ProtoMessage() {}

func (x *AddMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mtap_api_v1_events_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMetadataRequest.ProtoReflect.Descriptor instead.
func (*AddMetadataRequest) Descriptor() ([]byte, []int) {
	return file_mtap_api_v1_events_proto_rawDescGZIP(), []int{8}
}

func (x *AddMetadataRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *AddMetadataRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AddMetadataRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Response from the server for adding a metadata entry.
type AddMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddMetadataResponse) Reset() {
	*x = AddMetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mtap_api_v1_events_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMetadataResponse) ProtoMessage() {}

func (x *AddMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mtap_api_v1_events_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMetadataResponse.ProtoReflect.Descriptor instead.
func (*AddMetadataResponse) Descriptor() ([]byte, []int) {
	return file_mtap_api_v1_events_proto_rawDescGZIP(), []int{9}
}

// Request to get the keys for all binary data stored on the event.
type GetAllBinaryDataNamesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique event identifier.
	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
}

func (x *GetAllBinaryDataNamesRequest) Reset() {
	*x = GetAllBinaryDataNamesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mtap_api_v1_events_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllBinaryDataNamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllBinaryDataNamesRequest) ProtoMessage() {}

func (x *GetAllBinaryDataNamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mtap_api_v1_events_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllBinaryDataNamesRequest.ProtoReflect.Descriptor instead.
func (*GetAllBinaryDataNamesRequest) Descriptor() ([]byte, []int) {
	return file_mtap_api_v1_events_proto_rawDescGZIP(), []int{10}
}

func (x *GetAllBinaryDataNamesRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

// Response of all the binary names on the event.
type GetAllBinaryDataNamesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BinaryDataNames []string `protobuf:"bytes,1,rep,name=binary_data_names,json=binaryDataNames,proto3" json:"binary_data_names,omitempty"`
}

func (x *GetAllBinaryDataNamesResponse) Reset() {
	*x = GetAllBinaryDataNamesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mtap_api_v1_events_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllBinaryDataNamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllBinaryDataNamesResponse) ProtoMessage() {}

func (x *GetAllBinaryDataNamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mtap_api_v1_events_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllBinaryDataNamesResponse.ProtoReflect.Descriptor instead.
func (*GetAllBinaryDataNamesResponse) Descriptor() ([]byte, []int) {
	return file_mtap_api_v1_events_proto_rawDescGZIP(), []int{11}
}

func (x *GetAllBinaryDataNamesResponse) GetBinaryDataNames() []string {
	if x != nil {
		return x.BinaryDataNames
	}
	return nil
}

// Request to attach binary data to the event.
type AddBinaryDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique event identifier.
	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// The binary data key.
	BinaryDataName string `protobuf:"bytes,2,opt,name=binary_data_name,json=binaryDataName,proto3" json:"binary_data_name,omitempty"`
	// The binary data.
	BinaryData []byte `protobuf:"bytes,3,opt,name=binary_data,json=binaryData,proto3" json:"binary_data,omitempty"`
}

func (x *AddBinaryDataRequest) Reset() {
	*x = AddBinaryDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mtap_api_v1_events_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddBinaryDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBinaryDataRequest) ProtoMessage() {}

func (x *AddBinaryDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mtap_api_v1_events_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBinaryDataRequest.ProtoReflect.Descriptor instead.
func (*AddBinaryDataRequest) Descriptor() ([]byte, []int) {
	return file_mtap_api_v1_events_proto_rawDescGZIP(), []int{12}
}

func (x *AddBinaryDataRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *AddBinaryDataRequest) GetBinaryDataName() string {
	if x != nil {
		return x.BinaryDataName
	}
	return ""
}

func (x *AddBinaryDataRequest) GetBinaryData() []byte {
	if x != nil {
		return x.BinaryData
	}
	return nil
}

// Response after attaching binary data to the event.
type AddBinaryDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddBinaryDataResponse) Reset() {
	*x = AddBinaryDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mtap_api_v1_events_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddBinaryDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBinaryDataResponse) ProtoMessage() {}

func (x *AddBinaryDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mtap_api_v1_events_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBinaryDataResponse.ProtoReflect.Descriptor instead.
func (*AddBinaryDataResponse) Descriptor() ([]byte, []int) {
	return file_mtap_api_v1_events_proto_rawDescGZIP(), []int{13}
}

// Request for binary data on an event associated with a specific name.
type GetBinaryDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique event identifier.
	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// The binary data key.
	BinaryDataName string `protobuf:"bytes,2,opt,name=binary_data_name,json=binaryDataName,proto3" json:"binary_data_name,omitempty"`
}

func (x *GetBinaryDataRequest) Reset() {
	*x = GetBinaryDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mtap_api_v1_events_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBinaryDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBinaryDataRequest) ProtoMessage() {}

func (x *GetBinaryDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mtap_api_v1_events_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBinaryDataRequest.ProtoReflect.Descriptor instead.
func (*GetBinaryDataRequest) Descriptor() ([]byte, []int) {
	return file_mtap_api_v1_events_proto_rawDescGZIP(), []int{14}
}

func (x *GetBinaryDataRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *GetBinaryDataRequest) GetBinaryDataName() string {
	if x != nil {
		return x.BinaryDataName
	}
	return ""
}

type GetBinaryDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The binary data.
	BinaryData []byte `protobuf:"bytes,1,opt,name=binary_data,json=binaryData,proto3" json:"binary_data,omitempty"`
}

func (x *GetBinaryDataResponse) Reset() {
	*x = GetBinaryDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mtap_api_v1_events_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBinaryDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBinaryDataResponse) ProtoMessage() {}

func (x *GetBinaryDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mtap_api_v1_events_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBinaryDataResponse.ProtoReflect.Descriptor instead.
func (*GetBinaryDataResponse) Descriptor() ([]byte, []int) {
	return file_mtap_api_v1_events_proto_rawDescGZIP(), []int{15}
}

func (x *GetBinaryDataResponse) GetBinaryData() []byte {
	if x != nil {
		return x.BinaryData
	}
	return nil
}

// Request to add a document to an event.
type AddDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique event identifier.
	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// The event-unique document name.
	DocumentName string `protobuf:"bytes,2,opt,name=document_name,json=documentName,proto3" json:"document_name,omitempty"`
	// The document text.
	Text string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *AddDocumentRequest) Reset() {
	*x = AddDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mtap_api_v1_events_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDocumentRequest) ProtoMessage() {}

func (x *AddDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mtap_api_v1_events_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDocumentRequest.ProtoReflect.Descriptor instead.
func (*AddDocumentRequest) Descriptor() ([]byte, []int) {
	return file_mtap_api_v1_events_proto_rawDescGZIP(), []int{16}
}

func (x *AddDocumentRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *AddDocumentRequest) GetDocumentName() string {
	if x != nil {
		return x.DocumentName
	}
	return ""
}

func (x *AddDocumentRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// Response from the service when adding a document.
type AddDocumentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddDocumentResponse) Reset() {
	*x = AddDocumentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mtap_api_v1_events_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDocumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDocumentResponse) ProtoMessage() {}

func (x *AddDocumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mtap_api_v1_events_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDocumentResponse.ProtoReflect.Descriptor instead.
func (*AddDocumentResponse) Descriptor() ([]byte, []int) {
	return file_mtap_api_v1_events_proto_rawDescGZIP(), []int{17}
}

// Request to get the names of all documents for an event.
type GetAllDocumentNamesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique event identifier.
	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
}

func (x *GetAllDocumentNamesRequest) Reset() {
	*x = GetAllDocumentNamesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mtap_api_v1_events_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllDocumentNamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllDocumentNamesRequest) ProtoMessage() {}

func (x *GetAllDocumentNamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mtap_api_v1_events_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllDocumentNamesRequest.ProtoReflect.Descriptor instead.
func (*GetAllDocumentNamesRequest) Descriptor() ([]byte, []int) {
	return file_mtap_api_v1_events_proto_rawDescGZIP(), []int{18}
}

func (x *GetAllDocumentNamesRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

// Response of all the document names on an event.
type GetAllDocumentNamesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Repeated field containing all documents for the event.
	DocumentNames []string `protobuf:"bytes,1,rep,name=document_names,json=documentNames,proto3" json:"document_names,omitempty"`
}

func (x *GetAllDocumentNamesResponse) Reset() {
	*x = GetAllDocumentNamesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mtap_api_v1_events_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllDocumentNamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllDocumentNamesResponse) ProtoMessage() {}

func (x *GetAllDocumentNamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mtap_api_v1_events_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllDocumentNamesResponse.ProtoReflect.Descriptor instead.
func (*GetAllDocumentNamesResponse) Descriptor() ([]byte, []int) {
	return file_mtap_api_v1_events_proto_rawDescGZIP(), []int{19}
}

func (x *GetAllDocumentNamesResponse) GetDocumentNames() []string {
	if x != nil {
		return x.DocumentNames
	}
	return nil
}

// Request to get the document text.
type GetDocumentTextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique event identifier that the document occurs on.
	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// Retrieves the text of the document with this name.
	DocumentName string `protobuf:"bytes,2,opt,name=document_name,json=documentName,proto3" json:"document_name,omitempty"`
}

func (x *GetDocumentTextRequest) Reset() {
	*x = GetDocumentTextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mtap_api_v1_events_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDocumentTextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDocumentTextRequest) ProtoMessage() {}

func (x *GetDocumentTextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mtap_api_v1_events_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDocumentTextRequest.ProtoReflect.Descriptor instead.
func (*GetDocumentTextRequest) Descriptor() ([]byte, []int) {
	return file_mtap_api_v1_events_proto_rawDescGZIP(), []int{20}
}

func (x *GetDocumentTextRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *GetDocumentTextRequest) GetDocumentName() string {
	if x != nil {
		return x.DocumentName
	}
	return ""
}

// Response for getting the document text.
type GetDocumentTextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The text of the document.
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *GetDocumentTextResponse) Reset() {
	*x = GetDocumentTextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mtap_api_v1_events_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDocumentTextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDocumentTextResponse) ProtoMessage() {}

func (x *GetDocumentTextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mtap_api_v1_events_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDocumentTextResponse.ProtoReflect.Descriptor instead.
func (*GetDocumentTextResponse) Descriptor() ([]byte, []int) {
	return file_mtap_api_v1_events_proto_rawDescGZIP(), []int{21}
}

func (x *GetDocumentTextResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// Request to get information about the label indices on a document.
type GetLabelIndicesInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique event identifier.
	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// The document name on the event.
	DocumentName string `protobuf:"bytes,2,opt,name=document_name,json=documentName,proto3" json:"document_name,omitempty"`
}

func (x *GetLabelIndicesInfoRequest) Reset() {
	*x = GetLabelIndicesInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mtap_api_v1_events_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLabelIndicesInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLabelIndicesInfoRequest) ProtoMessage() {}

func (x *GetLabelIndicesInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mtap_api_v1_events_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLabelIndicesInfoRequest.ProtoReflect.Descriptor instead.
func (*GetLabelIndicesInfoRequest) Descriptor() ([]byte, []int) {
	return file_mtap_api_v1_events_proto_rawDescGZIP(), []int{22}
}

func (x *GetLabelIndicesInfoRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *GetLabelIndicesInfoRequest) GetDocumentName() string {
	if x != nil {
		return x.DocumentName
	}
	return ""
}

// Response of information about the label indices on a document.
type GetLabelIndicesInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Info about each label index on the document.
	LabelIndexInfos []*GetLabelIndicesInfoResponse_LabelIndexInfo `protobuf:"bytes,1,rep,name=label_index_infos,json=labelIndexInfos,proto3" json:"label_index_infos,omitempty"`
}

func (x *GetLabelIndicesInfoResponse) Reset() {
	*x = GetLabelIndicesInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mtap_api_v1_events_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLabelIndicesInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLabelIndicesInfoResponse) ProtoMessage() {}

func (x *GetLabelIndicesInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mtap_api_v1_events_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLabelIndicesInfoResponse.ProtoReflect.Descriptor instead.
func (*GetLabelIndicesInfoResponse) Descriptor() ([]byte, []int) {
	return file_mtap_api_v1_events_proto_rawDescGZIP(), []int{23}
}

func (x *GetLabelIndicesInfoResponse) GetLabelIndexInfos() []*GetLabelIndicesInfoResponse_LabelIndexInfo {
	if x != nil {
		return x.LabelIndexInfos
	}
	return nil
}

// Request to add labels to a document.
type AddLabelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique event identifier.
	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// The document name on the event.
	DocumentName string `protobuf:"bytes,2,opt,name=document_name,json=documentName,proto3" json:"document_name,omitempty"`
	// A document-unique identifier for the index to create on the document.
	IndexName string `protobuf:"bytes,3,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
	// The labels to store on the event service.
	//
	// Types that are assignable to Labels:
	//
	//	*AddLabelsRequest_GenericLabels
	//	*AddLabelsRequest_CustomLabels
	Labels isAddLabelsRequest_Labels `protobuf_oneof:"labels"`
	// Set to "true" if the client validates label field keys so to ensure that no reserved key names
	// occur. The key names that are reserved are "text", "document", and "location".
	NoKeyValidation bool `protobuf:"varint,6,opt,name=no_key_validation,json=noKeyValidation,proto3" json:"no_key_validation,omitempty"`
}

func (x *AddLabelsRequest) Reset() {
	*x = AddLabelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mtap_api_v1_events_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddLabelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLabelsRequest) ProtoMessage() {}

func (x *AddLabelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mtap_api_v1_events_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLabelsRequest.ProtoReflect.Descriptor instead.
func (*AddLabelsRequest) Descriptor() ([]byte, []int) {
	return file_mtap_api_v1_events_proto_rawDescGZIP(), []int{24}
}

func (x *AddLabelsRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *AddLabelsRequest) GetDocumentName() string {
	if x != nil {
		return x.DocumentName
	}
	return ""
}

func (x *AddLabelsRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (m *AddLabelsRequest) GetLabels() isAddLabelsRequest_Labels {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (x *AddLabelsRequest) GetGenericLabels() *GenericLabels {
	if x, ok := x.GetLabels().(*AddLabelsRequest_GenericLabels); ok {
		return x.GenericLabels
	}
	return nil
}

func (x *AddLabelsRequest) GetCustomLabels() *any1.Any {
	if x, ok := x.GetLabels().(*AddLabelsRequest_CustomLabels); ok {
		return x.CustomLabels
	}
	return nil
}

func (x *AddLabelsRequest) GetNoKeyValidation() bool {
	if x != nil {
		return x.NoKeyValidation
	}
	return false
}

type isAddLabelsRequest_Labels interface {
	isAddLabelsRequest_Labels()
}

type AddLabelsRequest_GenericLabels struct {
	// JsonLabels, which are a generic JSON object that should have the
	// start_index and end_index fields as well as any other fields that
	// the application requires.
	GenericLabels *GenericLabels `protobuf:"bytes,4,opt,name=generic_labels,json=genericLabels,proto3,oneof"`
}

type AddLabelsRequest_CustomLabels struct {
	// Experimental, a different type of serialized message, which the Events
	// service will store and return directly to clients.
	CustomLabels *any1.Any `protobuf:"bytes,5,opt,name=custom_labels,json=customLabels,proto3,oneof"`
}

func (*AddLabelsRequest_GenericLabels) isAddLabelsRequest_Labels() {}

func (*AddLabelsRequest_CustomLabels) isAddLabelsRequest_Labels() {}

// Response for adding labels to the events service.
type AddLabelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddLabelsResponse) Reset() {
	*x = AddLabelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mtap_api_v1_events_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddLabelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLabelsResponse) ProtoMessage() {}

func (x *AddLabelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mtap_api_v1_events_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLabelsResponse.ProtoReflect.Descriptor instead.
func (*AddLabelsResponse) Descriptor() ([]byte, []int) {
	return file_mtap_api_v1_events_proto_rawDescGZIP(), []int{25}
}

// Request for getting existing labels from the events service.
type GetLabelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The event that contains the document and labels.
	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// The document that contains the labels.
	DocumentName string `protobuf:"bytes,2,opt,name=document_name,json=documentName,proto3" json:"document_name,omitempty"`
	// The index name of the labels on the document.
	IndexName string `protobuf:"bytes,3,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
}

func (x *GetLabelsRequest) Reset() {
	*x = GetLabelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mtap_api_v1_events_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLabelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLabelsRequest) ProtoMessage() {}

func (x *GetLabelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mtap_api_v1_events_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLabelsRequest.ProtoReflect.Descriptor instead.
func (*GetLabelsRequest) Descriptor() ([]byte, []int) {
	return file_mtap_api_v1_events_proto_rawDescGZIP(), []int{26}
}

func (x *GetLabelsRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *GetLabelsRequest) GetDocumentName() string {
	if x != nil {
		return x.DocumentName
	}
	return ""
}

func (x *GetLabelsRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

// A Label Index of dynamic Labels, which are client/processor specified data
// objects containing information about an area of text.
type GenericLabels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the label index is distinct, i.e. only consists of non-overlapping,
	// non-empty spans of text.
	IsDistinct bool `protobuf:"varint,1,opt,name=is_distinct,json=isDistinct,proto3" json:"is_distinct,omitempty"`
	// The labels, which are dynamic JSON objects and must contain the number
	// fields "start_index" and "end_index". Any other fields are application-
	// specific and dynamic.
	Labels []*GenericLabel `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *GenericLabels) Reset() {
	*x = GenericLabels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mtap_api_v1_events_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericLabels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericLabels) ProtoMessage() {}

func (x *GenericLabels) ProtoReflect() protoreflect.Message {
	mi := &file_mtap_api_v1_events_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericLabels.ProtoReflect.Descriptor instead.
func (*GenericLabels) Descriptor() ([]byte, []int) {
	return file_mtap_api_v1_events_proto_rawDescGZIP(), []int{27}
}

func (x *GenericLabels) GetIsDistinct() bool {
	if x != nil {
		return x.IsDistinct
	}
	return false
}

func (x *GenericLabels) GetLabels() []*GenericLabel {
	if x != nil {
		return x.Labels
	}
	return nil
}

type GenericLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier for the label.
	Identifier uint32 `protobuf:"varint,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// The start offset of the label relative to the document.
	StartIndex uint32 `protobuf:"varint,2,opt,name=start_index,json=startIndex,proto3" json:"start_index,omitempty"`
	// The end offset of the label relative to the document.
	EndIndex uint32 `protobuf:"varint,3,opt,name=end_index,json=endIndex,proto3" json:"end_index,omitempty"`
	// A structure containing the dynamic primitive fields of the label.
	Fields *_struct.Struct `protobuf:"bytes,4,opt,name=fields,proto3" json:"fields,omitempty"`
	// A structure containing the reference fields of the label.
	ReferenceIds *_struct.Struct `protobuf:"bytes,5,opt,name=reference_ids,json=referenceIds,proto3" json:"reference_ids,omitempty"`
}

func (x *GenericLabel) Reset() {
	*x = GenericLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mtap_api_v1_events_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericLabel) ProtoMessage() {}

func (x *GenericLabel) ProtoReflect() protoreflect.Message {
	mi := &file_mtap_api_v1_events_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericLabel.ProtoReflect.Descriptor instead.
func (*GenericLabel) Descriptor() ([]byte, []int) {
	return file_mtap_api_v1_events_proto_rawDescGZIP(), []int{28}
}

func (x *GenericLabel) GetIdentifier() uint32 {
	if x != nil {
		return x.Identifier
	}
	return 0
}

func (x *GenericLabel) GetStartIndex() uint32 {
	if x != nil {
		return x.StartIndex
	}
	return 0
}

func (x *GenericLabel) GetEndIndex() uint32 {
	if x != nil {
		return x.EndIndex
	}
	return 0
}

func (x *GenericLabel) GetFields() *_struct.Struct {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *GenericLabel) GetReferenceIds() *_struct.Struct {
	if x != nil {
		return x.ReferenceIds
	}
	return nil
}

// The response for retrieving labels from an event and document.
type GetLabelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The serialized label index that was originally added to the events service.
	//
	// Types that are assignable to Labels:
	//
	//	*GetLabelsResponse_GenericLabels
	//	*GetLabelsResponse_CustomLabels
	Labels isGetLabelsResponse_Labels `protobuf_oneof:"labels"`
}

func (x *GetLabelsResponse) Reset() {
	*x = GetLabelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mtap_api_v1_events_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLabelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLabelsResponse) ProtoMessage() {}

func (x *GetLabelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mtap_api_v1_events_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLabelsResponse.ProtoReflect.Descriptor instead.
func (*GetLabelsResponse) Descriptor() ([]byte, []int) {
	return file_mtap_api_v1_events_proto_rawDescGZIP(), []int{29}
}

func (m *GetLabelsResponse) GetLabels() isGetLabelsResponse_Labels {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (x *GetLabelsResponse) GetGenericLabels() *GenericLabels {
	if x, ok := x.GetLabels().(*GetLabelsResponse_GenericLabels); ok {
		return x.GenericLabels
	}
	return nil
}

func (x *GetLabelsResponse) GetCustomLabels() *any1.Any {
	if x, ok := x.GetLabels().(*GetLabelsResponse_CustomLabels); ok {
		return x.CustomLabels
	}
	return nil
}

type isGetLabelsResponse_Labels interface {
	isGetLabelsResponse_Labels()
}

type GetLabelsResponse_GenericLabels struct {
	// If the original were GenericLabels.
	GenericLabels *GenericLabels `protobuf:"bytes,1,opt,name=generic_labels,json=genericLabels,proto3,oneof"`
}

type GetLabelsResponse_CustomLabels struct {
	// If the original were other_labels.
	CustomLabels *any1.Any `protobuf:"bytes,2,opt,name=custom_labels,json=customLabels,proto3,oneof"`
}

func (*GetLabelsResponse_GenericLabels) isGetLabelsResponse_Labels() {}

func (*GetLabelsResponse_CustomLabels) isGetLabelsResponse_Labels() {}

type GetLabelIndicesInfoResponse_LabelIndexInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A document-unique identifier for the index on the document.
	IndexName string                                                    `protobuf:"bytes,1,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
	Type      GetLabelIndicesInfoResponse_LabelIndexInfo_LabelIndexType `protobuf:"varint,2,opt,name=type,proto3,enum=mtap.api.v1.GetLabelIndicesInfoResponse_LabelIndexInfo_LabelIndexType" json:"type,omitempty"`
}

func (x *GetLabelIndicesInfoResponse_LabelIndexInfo) Reset() {
	*x = GetLabelIndicesInfoResponse_LabelIndexInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mtap_api_v1_events_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLabelIndicesInfoResponse_LabelIndexInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLabelIndicesInfoResponse_LabelIndexInfo) ProtoMessage() {}

func (x *GetLabelIndicesInfoResponse_LabelIndexInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mtap_api_v1_events_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLabelIndicesInfoResponse_LabelIndexInfo.ProtoReflect.Descriptor instead.
func (*GetLabelIndicesInfoResponse_LabelIndexInfo) Descriptor() ([]byte, []int) {
	return file_mtap_api_v1_events_proto_rawDescGZIP(), []int{23, 0}
}

func (x *GetLabelIndicesInfoResponse_LabelIndexInfo) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *GetLabelIndicesInfoResponse_LabelIndexInfo) GetType() GetLabelIndicesInfoResponse_LabelIndexInfo_LabelIndexType {
	if x != nil {
		return x.Type
	}
	return GetLabelIndicesInfoResponse_LabelIndexInfo_UNKNOWN
}

var File_mtap_api_v1_events_proto protoreflect.FileDescriptor

var file_mtap_api_v1_events_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6d, 0x74, 0x61, 0x70, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6d, 0x74, 0x61, 0x70,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1c,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3e, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x97, 0x01, 0x0a,
	0x10, 0x4f, 0x70, 0x65, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6f, 0x6e, 0x6c, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x65, 0x77, 0x12, 0x40, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64,
	0x22, 0x49, 0x0a, 0x11, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x12, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x32, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0xa4, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d,
	0x74, 0x61, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x57, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x15, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x4b, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x62,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x7c,
	0x0a, 0x14, 0x41, 0x64, 0x64, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x22, 0x17, 0x0a, 0x15,
	0x41, 0x64, 0x64, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x38, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x22, 0x68, 0x0a, 0x12,
	0x41, 0x64, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x58, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x78, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x5c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xc8, 0x02, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x11, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x6d, 0x74, 0x61, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x1a, 0xc3, 0x01, 0x0a, 0x0e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e, 0x6d, 0x74, 0x61, 0x70, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x36, 0x0a, 0x0e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x02, 0x22, 0xa9,
	0x02, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x74, 0x61,
	0x70, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x6f, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x6e, 0x6f, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x08, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x13, 0x0a, 0x11, 0x41, 0x64,
	0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x71, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x63, 0x0a, 0x0d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x44, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x63, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x74, 0x61, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0xdb, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x64,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x6e,
	0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2f, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x74, 0x61, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x48,
	0x00, 0x52, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x3b, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x00, 0x52,
	0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x42, 0x08, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0xd8, 0x0f, 0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x27, 0x2e, 0x6d, 0x74, 0x61,
	0x70, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x74, 0x61, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x6c, 0x0a,
	0x09, 0x4f, 0x70, 0x65, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x6d, 0x74, 0x61,
	0x70, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x74, 0x61, 0x70,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x7b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x6c, 0x0a, 0x0a, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x6d, 0x74, 0x61, 0x70,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x74, 0x61, 0x70,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x17, 0x2a, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x81, 0x01, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x22, 0x2e, 0x6d,
	0x74, 0x61, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x6d, 0x74, 0x61, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f,
	0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x81, 0x01,
	0x0a, 0x0b, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x2e,
	0x6d, 0x74, 0x61, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x6d, 0x74, 0x61, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x7b, 0x6b, 0x65, 0x79,
	0x7d, 0x12, 0x8c, 0x01, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x1f, 0x2e, 0x6d, 0x74, 0x61, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x64, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x74, 0x61, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x64, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x3a, 0x01, 0x2a, 0x22,
	0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x7b, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x12, 0x91, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x6d, 0x74, 0x61, 0x70, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x74, 0x61, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x7b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x23, 0x2e, 0x6d, 0x74, 0x61, 0x70, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x6d, 0x74, 0x61, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xa8, 0x01, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x2e, 0x6d, 0x74, 0x61, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x6d, 0x74, 0x61, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x12,
	0x36, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x7b, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x9a, 0x01, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1d, 0x2e, 0x6d, 0x74, 0x61, 0x70, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x74, 0x61, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x48, 0x3a, 0x01, 0x2a, 0x22,
	0x43, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x7b, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x12, 0x97, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x1d, 0x2e, 0x6d, 0x74, 0x61, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x74, 0x61, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x12, 0x43, 0x2f, 0x76, 0x31, 0x2f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x96,
	0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x6d, 0x74, 0x61, 0x70, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x74, 0x61, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x62,
	0x69, 0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x94, 0x01, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x2e, 0x6d, 0x74, 0x61, 0x70,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x42, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d,
	0x74, 0x61, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x42, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x3a, 0x01, 0x2a, 0x22, 0x31, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x62, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x91,
	0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x21, 0x2e, 0x6d, 0x74, 0x61, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d, 0x74, 0x61, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x12,
	0x31, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2f,
	0x7b, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x42, 0x28, 0x0a, 0x19, 0x65, 0x64, 0x75, 0x2e, 0x75, 0x6d, 0x6e, 0x2e, 0x6e, 0x6c,
	0x70, 0x69, 0x65, 0x2e, 0x6d, 0x74, 0x61, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x5a,
	0x0b, 0x6d, 0x74, 0x61, 0x70, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mtap_api_v1_events_proto_rawDescOnce sync.Once
	file_mtap_api_v1_events_proto_rawDescData = file_mtap_api_v1_events_proto_rawDesc
)

func file_mtap_api_v1_events_proto_rawDescGZIP() []byte {
	file_mtap_api_v1_events_proto_rawDescOnce.Do(func() {
		file_mtap_api_v1_events_proto_rawDescData = protoimpl.X.CompressGZIP(file_mtap_api_v1_events_proto_rawDescData)
	})
	return file_mtap_api_v1_events_proto_rawDescData
}

var file_mtap_api_v1_events_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_mtap_api_v1_events_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_mtap_api_v1_events_proto_goTypes = []interface{}{
	(GetLabelIndicesInfoResponse_LabelIndexInfo_LabelIndexType)(0), // 0: mtap.api.v1.GetLabelIndicesInfoResponse.LabelIndexInfo.LabelIndexType
	(*GetEventsInstanceIdRequest)(nil),                             // 1: mtap.api.v1.GetEventsInstanceIdRequest
	(*GetEventsInstanceIdResponse)(nil),                            // 2: mtap.api.v1.GetEventsInstanceIdResponse
	(*OpenEventRequest)(nil),                                       // 3: mtap.api.v1.OpenEventRequest
	(*OpenEventResponse)(nil),                                      // 4: mtap.api.v1.OpenEventResponse
	(*CloseEventRequest)(nil),                                      // 5: mtap.api.v1.CloseEventRequest
	(*CloseEventResponse)(nil),                                     // 6: mtap.api.v1.CloseEventResponse
	(*GetAllMetadataRequest)(nil),                                  // 7: mtap.api.v1.GetAllMetadataRequest
	(*GetAllMetadataResponse)(nil),                                 // 8: mtap.api.v1.GetAllMetadataResponse
	(*AddMetadataRequest)(nil),                                     // 9: mtap.api.v1.AddMetadataRequest
	(*AddMetadataResponse)(nil),                                    // 10: mtap.api.v1.AddMetadataResponse
	(*GetAllBinaryDataNamesRequest)(nil),                           // 11: mtap.api.v1.GetAllBinaryDataNamesRequest
	(*GetAllBinaryDataNamesResponse)(nil),                          // 12: mtap.api.v1.GetAllBinaryDataNamesResponse
	(*AddBinaryDataRequest)(nil),                                   // 13: mtap.api.v1.AddBinaryDataRequest
	(*AddBinaryDataResponse)(nil),                                  // 14: mtap.api.v1.AddBinaryDataResponse
	(*GetBinaryDataRequest)(nil),                                   // 15: mtap.api.v1.GetBinaryDataRequest
	(*GetBinaryDataResponse)(nil),                                  // 16: mtap.api.v1.GetBinaryDataResponse
	(*AddDocumentRequest)(nil),                                     // 17: mtap.api.v1.AddDocumentRequest
	(*AddDocumentResponse)(nil),                                    // 18: mtap.api.v1.AddDocumentResponse
	(*GetAllDocumentNamesRequest)(nil),                             // 19: mtap.api.v1.GetAllDocumentNamesRequest
	(*GetAllDocumentNamesResponse)(nil),                            // 20: mtap.api.v1.GetAllDocumentNamesResponse
	(*GetDocumentTextRequest)(nil),                                 // 21: mtap.api.v1.GetDocumentTextRequest
	(*GetDocumentTextResponse)(nil),                                // 22: mtap.api.v1.GetDocumentTextResponse
	(*GetLabelIndicesInfoRequest)(nil),                             // 23: mtap.api.v1.GetLabelIndicesInfoRequest
	(*GetLabelIndicesInfoResponse)(nil),                            // 24: mtap.api.v1.GetLabelIndicesInfoResponse
	(*AddLabelsRequest)(nil),                                       // 25: mtap.api.v1.AddLabelsRequest
	(*AddLabelsResponse)(nil),                                      // 26: mtap.api.v1.AddLabelsResponse
	(*GetLabelsRequest)(nil),                                       // 27: mtap.api.v1.GetLabelsRequest
	(*GenericLabels)(nil),                                          // 28: mtap.api.v1.GenericLabels
	(*GenericLabel)(nil),                                           // 29: mtap.api.v1.GenericLabel
	(*GetLabelsResponse)(nil),                                      // 30: mtap.api.v1.GetLabelsResponse
	nil,                                                            // 31: mtap.api.v1.GetAllMetadataResponse.MetadataEntry
	(*GetLabelIndicesInfoResponse_LabelIndexInfo)(nil),             // 32: mtap.api.v1.GetLabelIndicesInfoResponse.LabelIndexInfo
	(*duration.Duration)(nil),                                      // 33: google.protobuf.Duration
	(*any1.Any)(nil),                                               // 34: google.protobuf.Any
	(*_struct.Struct)(nil),                                         // 35: google.protobuf.Struct
}
var file_mtap_api_v1_events_proto_depIdxs = []int32{
	33, // 0: mtap.api.v1.OpenEventRequest.lease_duration:type_name -> google.protobuf.Duration
	31, // 1: mtap.api.v1.GetAllMetadataResponse.metadata:type_name -> mtap.api.v1.GetAllMetadataResponse.MetadataEntry
	32, // 2: mtap.api.v1.GetLabelIndicesInfoResponse.label_index_infos:type_name -> mtap.api.v1.GetLabelIndicesInfoResponse.LabelIndexInfo
	28, // 3: mtap.api.v1.AddLabelsRequest.generic_labels:type_name -> mtap.api.v1.GenericLabels
	34, // 4: mtap.api.v1.AddLabelsRequest.custom_labels:type_name -> google.protobuf.Any
	29, // 5: mtap.api.v1.GenericLabels.labels:type_name -> mtap.api.v1.GenericLabel
	35, // 6: mtap.api.v1.GenericLabel.fields:type_name -> google.protobuf.Struct
	35, // 7: mtap.api.v1.GenericLabel.reference_ids:type_name -> google.protobuf.Struct
	28, // 8: mtap.api.v1.GetLabelsResponse.generic_labels:type_name -> mtap.api.v1.GenericLabels
	34, // 9: mtap.api.v1.GetLabelsResponse.custom_labels:type_name -> google.protobuf.Any
	0,  // 10: mtap.api.v1.GetLabelIndicesInfoResponse.LabelIndexInfo.type:type_name -> mtap.api.v1.GetLabelIndicesInfoResponse.LabelIndexInfo.LabelIndexType
	1,  // 11: mtap.api.v1.Events.GetEventsInstanceId:input_type -> mtap.api.v1.GetEventsInstanceIdRequest
	3,  // 12: mtap.api.v1.Events.OpenEvent:input_type -> mtap.api.v1.OpenEventRequest
	5,  // 13: mtap.api.v1.Events.CloseEvent:input_type -> mtap.api.v1.CloseEventRequest
	7,  // 14: mtap.api.v1.Events.GetAllMetadata:input_type -> mtap.api.v1.GetAllMetadataRequest
	9,  // 15: mtap.api.v1.Events.AddMetadata:input_type -> mtap.api.v1.AddMetadataRequest
	17, // 16: mtap.api.v1.Events.AddDocument:input_type -> mtap.api.v1.AddDocumentRequest
	19, // 17: mtap.api.v1.Events.GetAllDocumentNames:input_type -> mtap.api.v1.GetAllDocumentNamesRequest
	21, // 18: mtap.api.v1.Events.GetDocumentText:input_type -> mtap.api.v1.GetDocumentTextRequest
	23, // 19: mtap.api.v1.Events.GetLabelIndicesInfo:input_type -> mtap.api.v1.GetLabelIndicesInfoRequest
	25, // 20: mtap.api.v1.Events.AddLabels:input_type -> mtap.api.v1.AddLabelsRequest
	27, // 21: mtap.api.v1.Events.GetLabels:input_type -> mtap.api.v1.GetLabelsRequest
	11, // 22: mtap.api.v1.Events.GetAllBinaryDataNames:input_type -> mtap.api.v1.GetAllBinaryDataNamesRequest
	13, // 23: mtap.api.v1.Events.AddBinaryData:input_type -> mtap.api.v1.AddBinaryDataRequest
	15, // 24: mtap.api.v1.Events.GetBinaryData:input_type -> mtap.api.v1.GetBinaryDataRequest
	2,  // 25: mtap.api.v1.Events.GetEventsInstanceId:output_type -> mtap.api.v1.GetEventsInstanceIdResponse
	4,  // 26: mtap.api.v1.Events.OpenEvent:output_type -> mtap.api.v1.OpenEventResponse
	6,  // 27: mtap.api.v1.Events.CloseEvent:output_type -> mtap.api.v1.CloseEventResponse
	8,  // 28: mtap.api.v1.Events.GetAllMetadata:output_type -> mtap.api.v1.GetAllMetadataResponse
	10, // 29: mtap.api.v1.Events.AddMetadata:output_type -> mtap.api.v1.AddMetadataResponse
	18, // 30: mtap.api.v1.Events.AddDocument:output_type -> mtap.api.v1.AddDocumentResponse
	20, // 31: mtap.api.v1.Events.GetAllDocumentNames:output_type -> mtap.api.v1.GetAllDocumentNamesResponse
	22, // 32: mtap.api.v1.Events.GetDocumentText:output_type -> mtap.api.v1.GetDocumentTextResponse
	24, // 33: mtap.api.v1.Events.GetLabelIndicesInfo:output_type -> mtap.api.v1.GetLabelIndicesInfoResponse
	26, // 34: mtap.api.v1.Events.AddLabels:output_type -> mtap.api.v1.AddLabelsResponse
	30, // 35: mtap.api.v1.Events.GetLabels:output_type -> mtap.api.v1.GetLabelsResponse
	12, // 36: mtap.api.v1.Events.GetAllBinaryDataNames:output_type -> mtap.api.v1.GetAllBinaryDataNamesResponse
	14, // 37: mtap.api.v1.Events.AddBinaryData:output_type -> mtap.api.v1.AddBinaryDataResponse
	16, // 38: mtap.api.v1.Events.GetBinaryData:output_type -> mtap.api.v1.GetBinaryDataResponse
	25, // [25:39] is the sub-list for method output_type
	11, // [11:25] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_mtap_api_v1_events_proto_init() }
func file_mtap_api_v1_events_proto_init() {
	if File_mtap_api_v1_events_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mtap_api_v1_events_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventsInstanceIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mtap_api_v1_events_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventsInstanceIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mtap_api_v1_events_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mtap_api_v1_events_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mtap_api_v1_events_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mtap_api_v1_events_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mtap_api_v1_events_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mtap_api_v1_events_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllMetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mtap_api_v1_events_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mtap_api_v1_events_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mtap_api_v1_events_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllBinaryDataNamesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mtap_api_v1_events_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllBinaryDataNamesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mtap_api_v1_events_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddBinaryDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mtap_api_v1_events_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddBinaryDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mtap_api_v1_events_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBinaryDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mtap_api_v1_events_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBinaryDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mtap_api_v1_events_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mtap_api_v1_events_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDocumentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mtap_api_v1_events_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllDocumentNamesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mtap_api_v1_events_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllDocumentNamesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mtap_api_v1_events_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDocumentTextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mtap_api_v1_events_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDocumentTextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mtap_api_v1_events_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLabelIndicesInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mtap_api_v1_events_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLabelIndicesInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mtap_api_v1_events_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddLabelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mtap_api_v1_events_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddLabelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mtap_api_v1_events_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLabelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mtap_api_v1_events_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericLabels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mtap_api_v1_events_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mtap_api_v1_events_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLabelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mtap_api_v1_events_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLabelIndicesInfoResponse_LabelIndexInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mtap_api_v1_events_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*AddLabelsRequest_GenericLabels)(nil),
		(*AddLabelsRequest_CustomLabels)(nil),
	}
	file_mtap_api_v1_events_proto_msgTypes[29].OneofWrappers = []interface{}{
		(*GetLabelsResponse_GenericLabels)(nil),
		(*GetLabelsResponse_CustomLabels)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mtap_api_v1_events_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mtap_api_v1_events_proto_goTypes,
		DependencyIndexes: file_mtap_api_v1_events_proto_depIdxs,
		EnumInfos:         file_mtap_api_v1_events_proto_enumTypes,
		MessageInfos:      file_mtap_api_v1_events_proto_msgTypes,
	}.Build()
	File_mtap_api_v1_events_proto = out.File
	file_mtap_api_v1_events_proto_rawDesc = nil
	file_mtap_api_v1_events_proto_goTypes = nil
	file_mtap_api_v1_events_proto_depIdxs = nil
}
