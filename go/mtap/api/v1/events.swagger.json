{
  "swagger": "2.0",
  "info": {
    "title": "mtap/api/v1/events.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/events/{event_id}": {
      "delete": {
        "summary": "Cedes a lease for an event, allowing this service to delete the\nevent if no active leases remain.",
        "operationId": "CloseEvent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CloseEventResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "event_id",
            "description": "The event_id to release.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "lease_id",
            "description": "Optional, if the lease has a timed expiration, this is required to prevent\nreleasing the lease twice.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Events"
        ]
      },
      "post": {
        "summary": "Acquires a lease for an event, which will prevent this service\nfrom deleting the event while the lease is still valid. Can be used to\neither create new events or return existing events.",
        "operationId": "OpenEvent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1OpenEventResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "event_id",
            "description": "The globally unique event identifier.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1OpenEventRequest"
            }
          }
        ],
        "tags": [
          "Events"
        ]
      }
    },
    "/v1/events/{event_id}/binaries": {
      "get": {
        "operationId": "GetAllBinaryDataNames",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAllBinaryDataNamesResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "event_id",
            "description": "The unique event identifier.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Events"
        ]
      }
    },
    "/v1/events/{event_id}/binaries/{binary_data_name}": {
      "get": {
        "operationId": "GetBinaryData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetBinaryDataResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "event_id",
            "description": "The unique event identifier.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "binary_data_name",
            "description": "The binary data key.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Events"
        ]
      },
      "post": {
        "operationId": "AddBinaryData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddBinaryDataResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "event_id",
            "description": "The unique event identifier.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "binary_data_name",
            "description": "The binary data key.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddBinaryDataRequest"
            }
          }
        ],
        "tags": [
          "Events"
        ]
      }
    },
    "/v1/events/{event_id}/documents": {
      "get": {
        "summary": "Returns the names keys of all documents that are stored on an event.",
        "operationId": "GetAllDocumentNames",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAllDocumentNamesResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "event_id",
            "description": "The unique event identifier.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Events"
        ]
      }
    },
    "/v1/events/{event_id}/documents/{document_name}": {
      "get": {
        "summary": "Returns the text of a document.",
        "operationId": "GetDocumentText",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetDocumentTextResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "event_id",
            "description": "Unique event identifier that the document occurs on.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "document_name",
            "description": "Retrieves the text of the document with this name.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Events"
        ]
      },
      "post": {
        "summary": "Adds a new document to an event.",
        "operationId": "AddDocument",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddDocumentResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "event_id",
            "description": "The unique event identifier.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "document_name",
            "description": "The event-unique document name.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddDocumentRequest"
            }
          }
        ],
        "tags": [
          "Events"
        ]
      }
    },
    "/v1/events/{event_id}/documents/{document_name}/labels": {
      "get": {
        "summary": "Returns the names keys of all label indices that are stored on a document.",
        "operationId": "GetLabelIndicesInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetLabelIndicesInfoResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "event_id",
            "description": "The unique event identifier.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "document_name",
            "description": "The document name on the event.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Events"
        ]
      }
    },
    "/v1/events/{event_id}/documents/{document_name}/labels/{index_name}": {
      "get": {
        "summary": "Gets all of the labels for a single label index.",
        "operationId": "GetLabels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetLabelsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "event_id",
            "description": "The event that contains the document and labels.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "document_name",
            "description": "The document that contains the labels.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "index_name",
            "description": "The index name of the labels on the document.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Events"
        ]
      },
      "post": {
        "summary": "Adds a single label index to the document.",
        "operationId": "AddLabels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddLabelsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "event_id",
            "description": "The unique event identifier.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "document_name",
            "description": "The document name on the event.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "index_name",
            "description": "A document-unique identifier for the index to create on the document.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddLabelsRequest"
            }
          }
        ],
        "tags": [
          "Events"
        ]
      }
    },
    "/v1/events/{event_id}/metadata": {
      "get": {
        "summary": "Endpoint to get all metadata associated with an event.",
        "operationId": "GetAllMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAllMetadataResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "event_id",
            "description": "Event unique identifier string.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Events"
        ]
      }
    },
    "/v1/events/{event_id}/metadata/{key}": {
      "post": {
        "summary": "Adds a new metadata entry to an event.",
        "operationId": "AddMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddMetadataResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "event_id",
            "description": "The unique event identifier.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "description": "The key for the metadata entry",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddMetadataRequest"
            }
          }
        ],
        "tags": [
          "Events"
        ]
      }
    }
  },
  "definitions": {
    "GetLabelIndicesInfoResponseLabelIndexInfo": {
      "type": "object",
      "properties": {
        "index_name": {
          "type": "string",
          "description": "A document-unique identifier for the index on the document."
        },
        "type": {
          "$ref": "#/definitions/LabelIndexInfoLabelIndexType"
        }
      }
    },
    "LabelIndexInfoLabelIndexType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "JSON",
        "OTHER"
      ],
      "default": "UNKNOWN",
      "description": " - UNKNOWN: Default, no labels field set or not known.\n - JSON: Has the \"json_labels\" field set.\n - OTHER: Has the \"other_labels\" field set."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "v1AddBinaryDataRequest": {
      "type": "object",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "The unique event identifier."
        },
        "binary_data_name": {
          "type": "string",
          "description": "The binary data key."
        },
        "binary_data": {
          "type": "string",
          "format": "byte",
          "description": "The binary data."
        }
      },
      "description": "Request to attach binary data to the event."
    },
    "v1AddBinaryDataResponse": {
      "type": "object",
      "description": "Response after attaching binary data to the event."
    },
    "v1AddDocumentRequest": {
      "type": "object",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "The unique event identifier."
        },
        "document_name": {
          "type": "string",
          "description": "The event-unique document name."
        },
        "text": {
          "type": "string",
          "description": "The document text."
        }
      },
      "description": "Request to add a document to an event."
    },
    "v1AddDocumentResponse": {
      "type": "object",
      "description": "Response from the service when adding a document."
    },
    "v1AddLabelsRequest": {
      "type": "object",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "The unique event identifier."
        },
        "document_name": {
          "type": "string",
          "description": "The document name on the event."
        },
        "index_name": {
          "type": "string",
          "description": "A document-unique identifier for the index to create on the document."
        },
        "json_labels": {
          "$ref": "#/definitions/v1JsonLabels",
          "description": "JsonLabels, which are a generic JSON object that should have the\nstart_index and end_index fields as well as any other fields that\nthe application requires."
        },
        "other_labels": {
          "$ref": "#/definitions/protobufAny",
          "description": "Experimental, a different type of serialized message, which the Events\nservice will store and return directly to clients."
        }
      },
      "description": "Request to add labels to a document."
    },
    "v1AddLabelsResponse": {
      "type": "object",
      "description": "Response for adding labels to the events service."
    },
    "v1AddMetadataRequest": {
      "type": "object",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "The unique event identifier."
        },
        "key": {
          "type": "string",
          "title": "The key for the metadata entry"
        },
        "value": {
          "type": "string",
          "description": "The value for the metadata entry."
        }
      },
      "title": "Request to add a metadata entry to the events service"
    },
    "v1AddMetadataResponse": {
      "type": "object",
      "description": "Response from the server for adding a metadata entry."
    },
    "v1CloseEventResponse": {
      "type": "object",
      "properties": {
        "deleted": {
          "type": "boolean",
          "format": "boolean",
          "description": "If the event was deleted after a close."
        }
      },
      "description": "Response from the service for closing events."
    },
    "v1GetAllBinaryDataNamesResponse": {
      "type": "object",
      "properties": {
        "binary_data_names": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Response of all the binary names on the event."
    },
    "v1GetAllDocumentNamesResponse": {
      "type": "object",
      "properties": {
        "document_names": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Repeated field containing all documents for the event."
        }
      },
      "description": "Response of all the document names on an event."
    },
    "v1GetAllMetadataResponse": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "The metadata map for the event"
        }
      },
      "description": "Response from the server for all metadata associated with an event."
    },
    "v1GetBinaryDataResponse": {
      "type": "object",
      "properties": {
        "binary_data": {
          "type": "string",
          "format": "byte",
          "description": "The binary data."
        }
      }
    },
    "v1GetDocumentTextResponse": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string",
          "description": "The text of the document."
        }
      },
      "description": "Response for getting the document text."
    },
    "v1GetLabelIndicesInfoResponse": {
      "type": "object",
      "properties": {
        "label_index_infos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetLabelIndicesInfoResponseLabelIndexInfo"
          },
          "description": "Info about each label index on the document."
        }
      },
      "description": "Response of information about the label indices on a document."
    },
    "v1GetLabelsResponse": {
      "type": "object",
      "properties": {
        "json_labels": {
          "$ref": "#/definitions/v1JsonLabels",
          "description": "If the original were JsonLabels."
        },
        "other_labels": {
          "$ref": "#/definitions/protobufAny",
          "description": "If the original were other_labels."
        }
      },
      "description": "The response for retrieving labels from an event and document."
    },
    "v1JsonLabels": {
      "type": "object",
      "properties": {
        "is_distinct": {
          "type": "boolean",
          "format": "boolean",
          "description": "Whether the label index is distinct, i.e. only consists of non-overlapping,\nnon-empty spans of text."
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "object"
          },
          "description": "The labels, which are dynamic JSON objects and must contain the number\nfields \"start_index\" and \"end_index\". Any other fields are application-\nspecific and dynamic."
        }
      },
      "description": "A Label Index of dynamic Labels, which are client/processor specified data\nobjects containing information about an area of text."
    },
    "v1OpenEventRequest": {
      "type": "object",
      "properties": {
        "event_id": {
          "type": "string",
          "description": "The globally unique event identifier."
        },
        "only_create_new": {
          "type": "boolean",
          "format": "boolean",
          "description": "Only create a new event, failing if the event already exists."
        },
        "lease_duration": {
          "type": "string",
          "description": "Optional, how long the lease is valid for."
        }
      },
      "description": "A request to open an event, retrieves a lease that prevents the service from\nde-allocating the event."
    },
    "v1OpenEventResponse": {
      "type": "object",
      "properties": {
        "created": {
          "type": "boolean",
          "format": "boolean",
          "description": "Whether the service created a new event."
        },
        "lease_id": {
          "type": "integer",
          "format": "int32",
          "description": "Optional, if the lease has a duration, an identifier which can be used to\ncede the lease, which will prevent the lease from being ceded twice."
        }
      },
      "description": "The response from the service for the open event endpoint."
    }
  }
}
