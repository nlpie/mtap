// APIs and message types for an enclosed pipeline.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: mtap/api/v1/pipeline.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Pipeline_Process_FullMethodName = "/mtap.api.v1.Pipeline/Process"
)

// PipelineClient is the client API for Pipeline service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PipelineClient interface {
	Process(ctx context.Context, in *ProcessEventInPipelineRequest, opts ...grpc.CallOption) (*ProcessEventInPipelineResponse, error)
}

type pipelineClient struct {
	cc grpc.ClientConnInterface
}

func NewPipelineClient(cc grpc.ClientConnInterface) PipelineClient {
	return &pipelineClient{cc}
}

func (c *pipelineClient) Process(ctx context.Context, in *ProcessEventInPipelineRequest, opts ...grpc.CallOption) (*ProcessEventInPipelineResponse, error) {
	out := new(ProcessEventInPipelineResponse)
	err := c.cc.Invoke(ctx, Pipeline_Process_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PipelineServer is the server API for Pipeline service.
// All implementations must embed UnimplementedPipelineServer
// for forward compatibility
type PipelineServer interface {
	Process(context.Context, *ProcessEventInPipelineRequest) (*ProcessEventInPipelineResponse, error)
	mustEmbedUnimplementedPipelineServer()
}

// UnimplementedPipelineServer must be embedded to have forward compatible implementations.
type UnimplementedPipelineServer struct {
}

func (UnimplementedPipelineServer) Process(context.Context, *ProcessEventInPipelineRequest) (*ProcessEventInPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Process not implemented")
}
func (UnimplementedPipelineServer) mustEmbedUnimplementedPipelineServer() {}

// UnsafePipelineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PipelineServer will
// result in compilation errors.
type UnsafePipelineServer interface {
	mustEmbedUnimplementedPipelineServer()
}

func RegisterPipelineServer(s grpc.ServiceRegistrar, srv PipelineServer) {
	s.RegisterService(&Pipeline_ServiceDesc, srv)
}

func _Pipeline_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessEventInPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pipeline_Process_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServer).Process(ctx, req.(*ProcessEventInPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Pipeline_ServiceDesc is the grpc.ServiceDesc for Pipeline service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pipeline_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtap.api.v1.Pipeline",
	HandlerType: (*PipelineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Process",
			Handler:    _Pipeline_Process_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mtap/api/v1/pipeline.proto",
}
