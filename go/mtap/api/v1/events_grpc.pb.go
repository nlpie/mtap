// Copyright 2019 Regents of the University of Minnesota
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// The public API endpoints for the events service, which is responsible for managing data during
// pipeline processing.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: mtap/api/v1/events.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Events_GetEventsInstanceId_FullMethodName   = "/mtap.api.v1.Events/GetEventsInstanceId"
	Events_OpenEvent_FullMethodName             = "/mtap.api.v1.Events/OpenEvent"
	Events_CloseEvent_FullMethodName            = "/mtap.api.v1.Events/CloseEvent"
	Events_GetAllMetadata_FullMethodName        = "/mtap.api.v1.Events/GetAllMetadata"
	Events_AddMetadata_FullMethodName           = "/mtap.api.v1.Events/AddMetadata"
	Events_AddDocument_FullMethodName           = "/mtap.api.v1.Events/AddDocument"
	Events_GetAllDocumentNames_FullMethodName   = "/mtap.api.v1.Events/GetAllDocumentNames"
	Events_GetDocumentText_FullMethodName       = "/mtap.api.v1.Events/GetDocumentText"
	Events_GetLabelIndicesInfo_FullMethodName   = "/mtap.api.v1.Events/GetLabelIndicesInfo"
	Events_AddLabels_FullMethodName             = "/mtap.api.v1.Events/AddLabels"
	Events_GetLabels_FullMethodName             = "/mtap.api.v1.Events/GetLabels"
	Events_GetAllBinaryDataNames_FullMethodName = "/mtap.api.v1.Events/GetAllBinaryDataNames"
	Events_AddBinaryData_FullMethodName         = "/mtap.api.v1.Events/AddBinaryData"
	Events_GetBinaryData_FullMethodName         = "/mtap.api.v1.Events/GetBinaryData"
)

// EventsClient is the client API for Events service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventsClient interface {
	GetEventsInstanceId(ctx context.Context, in *GetEventsInstanceIdRequest, opts ...grpc.CallOption) (*GetEventsInstanceIdResponse, error)
	// Acquires a lease for an event, which will prevent this service
	// from deleting the event while the lease is still valid. Can be used to
	// either create new events or return existing events.
	OpenEvent(ctx context.Context, in *OpenEventRequest, opts ...grpc.CallOption) (*OpenEventResponse, error)
	// Cedes a lease for an event, allowing this service to delete the
	// event if no active leases remain.
	CloseEvent(ctx context.Context, in *CloseEventRequest, opts ...grpc.CallOption) (*CloseEventResponse, error)
	// Endpoint to get all metadata associated with an event.
	GetAllMetadata(ctx context.Context, in *GetAllMetadataRequest, opts ...grpc.CallOption) (*GetAllMetadataResponse, error)
	// Adds a new metadata entry to an event.
	AddMetadata(ctx context.Context, in *AddMetadataRequest, opts ...grpc.CallOption) (*AddMetadataResponse, error)
	// Adds a new document to an event.
	AddDocument(ctx context.Context, in *AddDocumentRequest, opts ...grpc.CallOption) (*AddDocumentResponse, error)
	// Returns the names keys of all documents that are stored on an event.
	GetAllDocumentNames(ctx context.Context, in *GetAllDocumentNamesRequest, opts ...grpc.CallOption) (*GetAllDocumentNamesResponse, error)
	// Returns the text of a document.
	GetDocumentText(ctx context.Context, in *GetDocumentTextRequest, opts ...grpc.CallOption) (*GetDocumentTextResponse, error)
	// Returns the names keys of all label indices that are stored on a document.
	GetLabelIndicesInfo(ctx context.Context, in *GetLabelIndicesInfoRequest, opts ...grpc.CallOption) (*GetLabelIndicesInfoResponse, error)
	// Adds a single label index to the document.
	AddLabels(ctx context.Context, in *AddLabelsRequest, opts ...grpc.CallOption) (*AddLabelsResponse, error)
	// Gets all of the labels for a single label index.
	GetLabels(ctx context.Context, in *GetLabelsRequest, opts ...grpc.CallOption) (*GetLabelsResponse, error)
	GetAllBinaryDataNames(ctx context.Context, in *GetAllBinaryDataNamesRequest, opts ...grpc.CallOption) (*GetAllBinaryDataNamesResponse, error)
	AddBinaryData(ctx context.Context, in *AddBinaryDataRequest, opts ...grpc.CallOption) (*AddBinaryDataResponse, error)
	GetBinaryData(ctx context.Context, in *GetBinaryDataRequest, opts ...grpc.CallOption) (*GetBinaryDataResponse, error)
}

type eventsClient struct {
	cc grpc.ClientConnInterface
}

func NewEventsClient(cc grpc.ClientConnInterface) EventsClient {
	return &eventsClient{cc}
}

func (c *eventsClient) GetEventsInstanceId(ctx context.Context, in *GetEventsInstanceIdRequest, opts ...grpc.CallOption) (*GetEventsInstanceIdResponse, error) {
	out := new(GetEventsInstanceIdResponse)
	err := c.cc.Invoke(ctx, Events_GetEventsInstanceId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) OpenEvent(ctx context.Context, in *OpenEventRequest, opts ...grpc.CallOption) (*OpenEventResponse, error) {
	out := new(OpenEventResponse)
	err := c.cc.Invoke(ctx, Events_OpenEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) CloseEvent(ctx context.Context, in *CloseEventRequest, opts ...grpc.CallOption) (*CloseEventResponse, error) {
	out := new(CloseEventResponse)
	err := c.cc.Invoke(ctx, Events_CloseEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) GetAllMetadata(ctx context.Context, in *GetAllMetadataRequest, opts ...grpc.CallOption) (*GetAllMetadataResponse, error) {
	out := new(GetAllMetadataResponse)
	err := c.cc.Invoke(ctx, Events_GetAllMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) AddMetadata(ctx context.Context, in *AddMetadataRequest, opts ...grpc.CallOption) (*AddMetadataResponse, error) {
	out := new(AddMetadataResponse)
	err := c.cc.Invoke(ctx, Events_AddMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) AddDocument(ctx context.Context, in *AddDocumentRequest, opts ...grpc.CallOption) (*AddDocumentResponse, error) {
	out := new(AddDocumentResponse)
	err := c.cc.Invoke(ctx, Events_AddDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) GetAllDocumentNames(ctx context.Context, in *GetAllDocumentNamesRequest, opts ...grpc.CallOption) (*GetAllDocumentNamesResponse, error) {
	out := new(GetAllDocumentNamesResponse)
	err := c.cc.Invoke(ctx, Events_GetAllDocumentNames_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) GetDocumentText(ctx context.Context, in *GetDocumentTextRequest, opts ...grpc.CallOption) (*GetDocumentTextResponse, error) {
	out := new(GetDocumentTextResponse)
	err := c.cc.Invoke(ctx, Events_GetDocumentText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) GetLabelIndicesInfo(ctx context.Context, in *GetLabelIndicesInfoRequest, opts ...grpc.CallOption) (*GetLabelIndicesInfoResponse, error) {
	out := new(GetLabelIndicesInfoResponse)
	err := c.cc.Invoke(ctx, Events_GetLabelIndicesInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) AddLabels(ctx context.Context, in *AddLabelsRequest, opts ...grpc.CallOption) (*AddLabelsResponse, error) {
	out := new(AddLabelsResponse)
	err := c.cc.Invoke(ctx, Events_AddLabels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) GetLabels(ctx context.Context, in *GetLabelsRequest, opts ...grpc.CallOption) (*GetLabelsResponse, error) {
	out := new(GetLabelsResponse)
	err := c.cc.Invoke(ctx, Events_GetLabels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) GetAllBinaryDataNames(ctx context.Context, in *GetAllBinaryDataNamesRequest, opts ...grpc.CallOption) (*GetAllBinaryDataNamesResponse, error) {
	out := new(GetAllBinaryDataNamesResponse)
	err := c.cc.Invoke(ctx, Events_GetAllBinaryDataNames_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) AddBinaryData(ctx context.Context, in *AddBinaryDataRequest, opts ...grpc.CallOption) (*AddBinaryDataResponse, error) {
	out := new(AddBinaryDataResponse)
	err := c.cc.Invoke(ctx, Events_AddBinaryData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) GetBinaryData(ctx context.Context, in *GetBinaryDataRequest, opts ...grpc.CallOption) (*GetBinaryDataResponse, error) {
	out := new(GetBinaryDataResponse)
	err := c.cc.Invoke(ctx, Events_GetBinaryData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventsServer is the server API for Events service.
// All implementations must embed UnimplementedEventsServer
// for forward compatibility
type EventsServer interface {
	GetEventsInstanceId(context.Context, *GetEventsInstanceIdRequest) (*GetEventsInstanceIdResponse, error)
	// Acquires a lease for an event, which will prevent this service
	// from deleting the event while the lease is still valid. Can be used to
	// either create new events or return existing events.
	OpenEvent(context.Context, *OpenEventRequest) (*OpenEventResponse, error)
	// Cedes a lease for an event, allowing this service to delete the
	// event if no active leases remain.
	CloseEvent(context.Context, *CloseEventRequest) (*CloseEventResponse, error)
	// Endpoint to get all metadata associated with an event.
	GetAllMetadata(context.Context, *GetAllMetadataRequest) (*GetAllMetadataResponse, error)
	// Adds a new metadata entry to an event.
	AddMetadata(context.Context, *AddMetadataRequest) (*AddMetadataResponse, error)
	// Adds a new document to an event.
	AddDocument(context.Context, *AddDocumentRequest) (*AddDocumentResponse, error)
	// Returns the names keys of all documents that are stored on an event.
	GetAllDocumentNames(context.Context, *GetAllDocumentNamesRequest) (*GetAllDocumentNamesResponse, error)
	// Returns the text of a document.
	GetDocumentText(context.Context, *GetDocumentTextRequest) (*GetDocumentTextResponse, error)
	// Returns the names keys of all label indices that are stored on a document.
	GetLabelIndicesInfo(context.Context, *GetLabelIndicesInfoRequest) (*GetLabelIndicesInfoResponse, error)
	// Adds a single label index to the document.
	AddLabels(context.Context, *AddLabelsRequest) (*AddLabelsResponse, error)
	// Gets all of the labels for a single label index.
	GetLabels(context.Context, *GetLabelsRequest) (*GetLabelsResponse, error)
	GetAllBinaryDataNames(context.Context, *GetAllBinaryDataNamesRequest) (*GetAllBinaryDataNamesResponse, error)
	AddBinaryData(context.Context, *AddBinaryDataRequest) (*AddBinaryDataResponse, error)
	GetBinaryData(context.Context, *GetBinaryDataRequest) (*GetBinaryDataResponse, error)
	mustEmbedUnimplementedEventsServer()
}

// UnimplementedEventsServer must be embedded to have forward compatible implementations.
type UnimplementedEventsServer struct {
}

func (UnimplementedEventsServer) GetEventsInstanceId(context.Context, *GetEventsInstanceIdRequest) (*GetEventsInstanceIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventsInstanceId not implemented")
}
func (UnimplementedEventsServer) OpenEvent(context.Context, *OpenEventRequest) (*OpenEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenEvent not implemented")
}
func (UnimplementedEventsServer) CloseEvent(context.Context, *CloseEventRequest) (*CloseEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseEvent not implemented")
}
func (UnimplementedEventsServer) GetAllMetadata(context.Context, *GetAllMetadataRequest) (*GetAllMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMetadata not implemented")
}
func (UnimplementedEventsServer) AddMetadata(context.Context, *AddMetadataRequest) (*AddMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMetadata not implemented")
}
func (UnimplementedEventsServer) AddDocument(context.Context, *AddDocumentRequest) (*AddDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDocument not implemented")
}
func (UnimplementedEventsServer) GetAllDocumentNames(context.Context, *GetAllDocumentNamesRequest) (*GetAllDocumentNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDocumentNames not implemented")
}
func (UnimplementedEventsServer) GetDocumentText(context.Context, *GetDocumentTextRequest) (*GetDocumentTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentText not implemented")
}
func (UnimplementedEventsServer) GetLabelIndicesInfo(context.Context, *GetLabelIndicesInfoRequest) (*GetLabelIndicesInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabelIndicesInfo not implemented")
}
func (UnimplementedEventsServer) AddLabels(context.Context, *AddLabelsRequest) (*AddLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLabels not implemented")
}
func (UnimplementedEventsServer) GetLabels(context.Context, *GetLabelsRequest) (*GetLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabels not implemented")
}
func (UnimplementedEventsServer) GetAllBinaryDataNames(context.Context, *GetAllBinaryDataNamesRequest) (*GetAllBinaryDataNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBinaryDataNames not implemented")
}
func (UnimplementedEventsServer) AddBinaryData(context.Context, *AddBinaryDataRequest) (*AddBinaryDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBinaryData not implemented")
}
func (UnimplementedEventsServer) GetBinaryData(context.Context, *GetBinaryDataRequest) (*GetBinaryDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBinaryData not implemented")
}
func (UnimplementedEventsServer) mustEmbedUnimplementedEventsServer() {}

// UnsafeEventsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventsServer will
// result in compilation errors.
type UnsafeEventsServer interface {
	mustEmbedUnimplementedEventsServer()
}

func RegisterEventsServer(s grpc.ServiceRegistrar, srv EventsServer) {
	s.RegisterService(&Events_ServiceDesc, srv)
}

func _Events_GetEventsInstanceId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventsInstanceIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).GetEventsInstanceId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Events_GetEventsInstanceId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).GetEventsInstanceId(ctx, req.(*GetEventsInstanceIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_OpenEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).OpenEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Events_OpenEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).OpenEvent(ctx, req.(*OpenEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_CloseEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).CloseEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Events_CloseEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).CloseEvent(ctx, req.(*CloseEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_GetAllMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).GetAllMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Events_GetAllMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).GetAllMetadata(ctx, req.(*GetAllMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_AddMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).AddMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Events_AddMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).AddMetadata(ctx, req.(*AddMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_AddDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).AddDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Events_AddDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).AddDocument(ctx, req.(*AddDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_GetAllDocumentNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllDocumentNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).GetAllDocumentNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Events_GetAllDocumentNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).GetAllDocumentNames(ctx, req.(*GetAllDocumentNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_GetDocumentText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).GetDocumentText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Events_GetDocumentText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).GetDocumentText(ctx, req.(*GetDocumentTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_GetLabelIndicesInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLabelIndicesInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).GetLabelIndicesInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Events_GetLabelIndicesInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).GetLabelIndicesInfo(ctx, req.(*GetLabelIndicesInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_AddLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).AddLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Events_AddLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).AddLabels(ctx, req.(*AddLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_GetLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).GetLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Events_GetLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).GetLabels(ctx, req.(*GetLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_GetAllBinaryDataNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllBinaryDataNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).GetAllBinaryDataNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Events_GetAllBinaryDataNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).GetAllBinaryDataNames(ctx, req.(*GetAllBinaryDataNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_AddBinaryData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBinaryDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).AddBinaryData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Events_AddBinaryData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).AddBinaryData(ctx, req.(*AddBinaryDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_GetBinaryData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBinaryDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).GetBinaryData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Events_GetBinaryData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).GetBinaryData(ctx, req.(*GetBinaryDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Events_ServiceDesc is the grpc.ServiceDesc for Events service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Events_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtap.api.v1.Events",
	HandlerType: (*EventsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEventsInstanceId",
			Handler:    _Events_GetEventsInstanceId_Handler,
		},
		{
			MethodName: "OpenEvent",
			Handler:    _Events_OpenEvent_Handler,
		},
		{
			MethodName: "CloseEvent",
			Handler:    _Events_CloseEvent_Handler,
		},
		{
			MethodName: "GetAllMetadata",
			Handler:    _Events_GetAllMetadata_Handler,
		},
		{
			MethodName: "AddMetadata",
			Handler:    _Events_AddMetadata_Handler,
		},
		{
			MethodName: "AddDocument",
			Handler:    _Events_AddDocument_Handler,
		},
		{
			MethodName: "GetAllDocumentNames",
			Handler:    _Events_GetAllDocumentNames_Handler,
		},
		{
			MethodName: "GetDocumentText",
			Handler:    _Events_GetDocumentText_Handler,
		},
		{
			MethodName: "GetLabelIndicesInfo",
			Handler:    _Events_GetLabelIndicesInfo_Handler,
		},
		{
			MethodName: "AddLabels",
			Handler:    _Events_AddLabels_Handler,
		},
		{
			MethodName: "GetLabels",
			Handler:    _Events_GetLabels_Handler,
		},
		{
			MethodName: "GetAllBinaryDataNames",
			Handler:    _Events_GetAllBinaryDataNames_Handler,
		},
		{
			MethodName: "AddBinaryData",
			Handler:    _Events_AddBinaryData_Handler,
		},
		{
			MethodName: "GetBinaryData",
			Handler:    _Events_GetBinaryData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mtap/api/v1/events.proto",
}
